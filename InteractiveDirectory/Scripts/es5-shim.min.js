




<!DOCTYPE html>
<html class="   ">
  <head prefix="og: http://ogp.me/ns# fb: http://ogp.me/ns/fb# object: http://ogp.me/ns/object# article: http://ogp.me/ns/article# profile: http://ogp.me/ns/profile#">
    <meta charset='utf-8'>
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    
    
    <title>es5-shim/es5-shim.min.js at master · es-shims/es5-shim · GitHub</title>
    <link rel="search" type="application/opensearchdescription+xml" href="/opensearch.xml" title="GitHub" />
    <link rel="fluid-icon" href="https://github.com/fluidicon.png" title="GitHub" />
    <link rel="apple-touch-icon" sizes="57x57" href="/apple-touch-icon-114.png" />
    <link rel="apple-touch-icon" sizes="114x114" href="/apple-touch-icon-114.png" />
    <link rel="apple-touch-icon" sizes="72x72" href="/apple-touch-icon-144.png" />
    <link rel="apple-touch-icon" sizes="144x144" href="/apple-touch-icon-144.png" />
    <meta property="fb:app_id" content="1401488693436528"/>

      <meta content="@github" name="twitter:site" /><meta content="summary" name="twitter:card" /><meta content="es-shims/es5-shim" name="twitter:title" /><meta content="es5-shim - ECMAScript 5 compatibility shims for legacy JavaScript engines" name="twitter:description" /><meta content="https://avatars0.githubusercontent.com/u/6288429?s=400" name="twitter:image:src" />
<meta content="GitHub" property="og:site_name" /><meta content="object" property="og:type" /><meta content="https://avatars0.githubusercontent.com/u/6288429?s=400" property="og:image" /><meta content="es-shims/es5-shim" property="og:title" /><meta content="https://github.com/es-shims/es5-shim" property="og:url" /><meta content="es5-shim - ECMAScript 5 compatibility shims for legacy JavaScript engines" property="og:description" />

    <link rel="assets" href="https://github.global.ssl.fastly.net/">
    <link rel="conduit-xhr" href="https://ghconduit.com:25035/">
    <link rel="xhr-socket" href="/_sockets" />

    <meta name="msapplication-TileImage" content="/windows-tile.png" />
    <meta name="msapplication-TileColor" content="#ffffff" />
    <meta name="selected-link" value="repo_source" data-pjax-transient />
    <meta content="collector.githubapp.com" name="octolytics-host" /><meta content="collector-cdn.github.com" name="octolytics-script-host" /><meta content="github" name="octolytics-app-id" /><meta content="3F51C315:1927:D50671:5351313A" name="octolytics-dimension-request_id" />
    

    
    
    <link rel="icon" type="image/x-icon" href="https://github.global.ssl.fastly.net/favicon.ico" />

    <meta content="authenticity_token" name="csrf-param" />
<meta content="U1F+z29Q/RU4aQZrnYw48pyw10cK0LDVtj4e3mfqxBk=" name="csrf-token" />

    <link href="https://github.global.ssl.fastly.net/assets/github-96f104cca04e50f916e268ebf2d3f7b009e1405e.css" media="all" rel="stylesheet" type="text/css" />
    <link href="https://github.global.ssl.fastly.net/assets/github2-57dd48a565424fa05bdd0a122918d0d42919021b.css" media="all" rel="stylesheet" type="text/css" />
    


        <script crossorigin="anonymous" src="https://github.global.ssl.fastly.net/assets/frameworks-bdc08296a41dcc580bdf91802b61d36f6e37bbdb.js" type="text/javascript"></script>
        <script async="async" crossorigin="anonymous" src="https://github.global.ssl.fastly.net/assets/github-d5daf1651a98e228ce078d4c2a72a4ec0764c65d.js" type="text/javascript"></script>
        
        
      <meta http-equiv="x-pjax-version" content="a9b0b33b254b52d35159b8aa1cc1c088">

        <link data-pjax-transient rel='permalink' href='/es-shims/es5-shim/blob/93ef7c3ae953d904733829d06143e41b8148dc9d/es5-shim.min.js'>

  <meta name="description" content="es5-shim - ECMAScript 5 compatibility shims for legacy JavaScript engines" />

  <meta content="6288429" name="octolytics-dimension-user_id" /><meta content="es-shims" name="octolytics-dimension-user_login" /><meta content="914603" name="octolytics-dimension-repository_id" /><meta content="es-shims/es5-shim" name="octolytics-dimension-repository_nwo" /><meta content="true" name="octolytics-dimension-repository_public" /><meta content="false" name="octolytics-dimension-repository_is_fork" /><meta content="914603" name="octolytics-dimension-repository_network_root_id" /><meta content="es-shims/es5-shim" name="octolytics-dimension-repository_network_root_nwo" />
  <link href="https://github.com/es-shims/es5-shim/commits/master.atom" rel="alternate" title="Recent Commits to es5-shim:master" type="application/atom+xml" />

  </head>


  <body class="logged_out  env-production windows vis-public page-blob">
    <a href="#start-of-content" tabindex="1" class="accessibility-aid js-skip-to-content">Skip to content</a>
    <div class="wrapper">
      
      
      
      


      
      <div class="header header-logged-out">
  <div class="container clearfix">

    <a class="header-logo-wordmark" href="https://github.com/">
      <span class="mega-octicon octicon-logo-github"></span>
    </a>

    <div class="header-actions">
        <a class="button primary" href="/join">Sign up</a>
      <a class="button signin" href="/login?return_to=%2Fes-shims%2Fes5-shim%2Fblob%2Fmaster%2Fes5-shim.min.js">Sign in</a>
    </div>

    <div class="command-bar js-command-bar  in-repository">

      <ul class="top-nav">
          <li class="explore"><a href="/explore">Explore</a></li>
        <li class="features"><a href="/features">Features</a></li>
          <li class="enterprise"><a href="https://enterprise.github.com/">Enterprise</a></li>
          <li class="blog"><a href="/blog">Blog</a></li>
      </ul>
        <form accept-charset="UTF-8" action="/search" class="command-bar-form" id="top_search_form" method="get">

<div class="commandbar">
  <span class="message"></span>
  <input type="text" data-hotkey="/ s" name="q" id="js-command-bar-field" placeholder="Search or type a command" tabindex="1" autocapitalize="off"
    
    
      data-repo="es-shims/es5-shim"
      data-branch="master"
      data-sha="11c2d93744e6ef62728db080112c4670921f4ef6"
  >
  <div class="display hidden"></div>
</div>

    <input type="hidden" name="nwo" value="es-shims/es5-shim" />

    <div class="select-menu js-menu-container js-select-menu search-context-select-menu">
      <span class="minibutton select-menu-button js-menu-target" role="button" aria-haspopup="true">
        <span class="js-select-button">This repository</span>
      </span>

      <div class="select-menu-modal-holder js-menu-content js-navigation-container" aria-hidden="true">
        <div class="select-menu-modal">

          <div class="select-menu-item js-navigation-item js-this-repository-navigation-item selected">
            <span class="select-menu-item-icon octicon octicon-check"></span>
            <input type="radio" class="js-search-this-repository" name="search_target" value="repository" checked="checked" />
            <div class="select-menu-item-text js-select-button-text">This repository</div>
          </div> <!-- /.select-menu-item -->

          <div class="select-menu-item js-navigation-item js-all-repositories-navigation-item">
            <span class="select-menu-item-icon octicon octicon-check"></span>
            <input type="radio" name="search_target" value="global" />
            <div class="select-menu-item-text js-select-button-text">All repositories</div>
          </div> <!-- /.select-menu-item -->

        </div>
      </div>
    </div>

  <span class="help tooltipped tooltipped-s" aria-label="Show command bar help">
    <span class="octicon octicon-question"></span>
  </span>


  <input type="hidden" name="ref" value="cmdform">

</form>
    </div>

  </div>
</div>



      <div id="start-of-content" class="accessibility-aid"></div>
          <div class="site" itemscope itemtype="http://schema.org/WebPage">
    
    <div class="pagehead repohead instapaper_ignore readability-menu">
      <div class="container">
        

<ul class="pagehead-actions">


  <li>
    <a href="/login?return_to=%2Fes-shims%2Fes5-shim"
    class="minibutton with-count js-toggler-target star-button tooltipped tooltipped-n"
    aria-label="You must be signed in to star a repository" rel="nofollow">
    <span class="octicon octicon-star"></span>Star
  </a>

    <a class="social-count js-social-count" href="/es-shims/es5-shim/stargazers">
      2,499
    </a>

  </li>

    <li>
      <a href="/login?return_to=%2Fes-shims%2Fes5-shim"
        class="minibutton with-count js-toggler-target fork-button tooltipped tooltipped-n"
        aria-label="You must be signed in to fork a repository" rel="nofollow">
        <span class="octicon octicon-git-branch"></span>Fork
      </a>
      <a href="/es-shims/es5-shim/network" class="social-count">
        353
      </a>
    </li>
</ul>

        <h1 itemscope itemtype="http://data-vocabulary.org/Breadcrumb" class="entry-title public">
          <span class="repo-label"><span>public</span></span>
          <span class="mega-octicon octicon-repo"></span>
          <span class="author"><a href="/es-shims" class="url fn" itemprop="url" rel="author"><span itemprop="title">es-shims</span></a></span><!--
       --><span class="path-divider">/</span><!--
       --><strong><a href="/es-shims/es5-shim" class="js-current-repository js-repo-home-link">es5-shim</a></strong>

          <span class="page-context-loader">
            <img alt="Octocat-spinner-32" height="16" src="https://github.global.ssl.fastly.net/images/spinners/octocat-spinner-32.gif" width="16" />
          </span>

        </h1>
      </div><!-- /.container -->
    </div><!-- /.repohead -->

    <div class="container">
      <div class="repository-with-sidebar repo-container new-discussion-timeline js-new-discussion-timeline  ">
        <div class="repository-sidebar clearfix">
            

<div class="sunken-menu vertical-right repo-nav js-repo-nav js-repository-container-pjax js-octicon-loaders">
  <div class="sunken-menu-contents">
    <ul class="sunken-menu-group">
      <li class="tooltipped tooltipped-w" aria-label="Code">
        <a href="/es-shims/es5-shim" aria-label="Code" class="selected js-selected-navigation-item sunken-menu-item" data-gotokey="c" data-pjax="true" data-selected-links="repo_source repo_downloads repo_commits repo_tags repo_branches /es-shims/es5-shim">
          <span class="octicon octicon-code"></span> <span class="full-word">Code</span>
          <img alt="Octocat-spinner-32" class="mini-loader" height="16" src="https://github.global.ssl.fastly.net/images/spinners/octocat-spinner-32.gif" width="16" />
</a>      </li>

        <li class="tooltipped tooltipped-w" aria-label="Issues">
          <a href="/es-shims/es5-shim/issues" aria-label="Issues" class="js-selected-navigation-item sunken-menu-item js-disable-pjax" data-gotokey="i" data-selected-links="repo_issues /es-shims/es5-shim/issues">
            <span class="octicon octicon-issue-opened"></span> <span class="full-word">Issues</span>
            <span class='counter'>17</span>
            <img alt="Octocat-spinner-32" class="mini-loader" height="16" src="https://github.global.ssl.fastly.net/images/spinners/octocat-spinner-32.gif" width="16" />
</a>        </li>

      <li class="tooltipped tooltipped-w" aria-label="Pull Requests">
        <a href="/es-shims/es5-shim/pulls" aria-label="Pull Requests" class="js-selected-navigation-item sunken-menu-item js-disable-pjax" data-gotokey="p" data-selected-links="repo_pulls /es-shims/es5-shim/pulls">
            <span class="octicon octicon-git-pull-request"></span> <span class="full-word">Pull Requests</span>
            <span class='counter'>0</span>
            <img alt="Octocat-spinner-32" class="mini-loader" height="16" src="https://github.global.ssl.fastly.net/images/spinners/octocat-spinner-32.gif" width="16" />
</a>      </li>


    </ul>
    <div class="sunken-menu-separator"></div>
    <ul class="sunken-menu-group">

      <li class="tooltipped tooltipped-w" aria-label="Pulse">
        <a href="/es-shims/es5-shim/pulse" aria-label="Pulse" class="js-selected-navigation-item sunken-menu-item" data-pjax="true" data-selected-links="pulse /es-shims/es5-shim/pulse">
          <span class="octicon octicon-pulse"></span> <span class="full-word">Pulse</span>
          <img alt="Octocat-spinner-32" class="mini-loader" height="16" src="https://github.global.ssl.fastly.net/images/spinners/octocat-spinner-32.gif" width="16" />
</a>      </li>

      <li class="tooltipped tooltipped-w" aria-label="Graphs">
        <a href="/es-shims/es5-shim/graphs" aria-label="Graphs" class="js-selected-navigation-item sunken-menu-item" data-pjax="true" data-selected-links="repo_graphs repo_contributors /es-shims/es5-shim/graphs">
          <span class="octicon octicon-graph"></span> <span class="full-word">Graphs</span>
          <img alt="Octocat-spinner-32" class="mini-loader" height="16" src="https://github.global.ssl.fastly.net/images/spinners/octocat-spinner-32.gif" width="16" />
</a>      </li>

      <li class="tooltipped tooltipped-w" aria-label="Network">
        <a href="/es-shims/es5-shim/network" aria-label="Network" class="js-selected-navigation-item sunken-menu-item js-disable-pjax" data-selected-links="repo_network /es-shims/es5-shim/network">
          <span class="octicon octicon-git-branch"></span> <span class="full-word">Network</span>
          <img alt="Octocat-spinner-32" class="mini-loader" height="16" src="https://github.global.ssl.fastly.net/images/spinners/octocat-spinner-32.gif" width="16" />
</a>      </li>
    </ul>


  </div>
</div>

              <div class="only-with-full-nav">
                

  

<div class="clone-url open"
  data-protocol-type="http"
  data-url="/users/set_protocol?protocol_selector=http&amp;protocol_type=clone">
  <h3><strong>HTTPS</strong> clone URL</h3>
  <div class="clone-url-box">
    <input type="text" class="clone js-url-field"
           value="https://github.com/es-shims/es5-shim.git" readonly="readonly">

    <span aria-label="copy to clipboard" class="js-zeroclipboard url-box-clippy minibutton zeroclipboard-button" data-clipboard-text="https://github.com/es-shims/es5-shim.git" data-copied-hint="copied!"><span class="octicon octicon-clippy"></span></span>
  </div>
</div>

  

<div class="clone-url "
  data-protocol-type="subversion"
  data-url="/users/set_protocol?protocol_selector=subversion&amp;protocol_type=clone">
  <h3><strong>Subversion</strong> checkout URL</h3>
  <div class="clone-url-box">
    <input type="text" class="clone js-url-field"
           value="https://github.com/es-shims/es5-shim" readonly="readonly">

    <span aria-label="copy to clipboard" class="js-zeroclipboard url-box-clippy minibutton zeroclipboard-button" data-clipboard-text="https://github.com/es-shims/es5-shim" data-copied-hint="copied!"><span class="octicon octicon-clippy"></span></span>
  </div>
</div>


<p class="clone-options">You can clone with
      <a href="#" class="js-clone-selector" data-protocol="http">HTTPS</a>
      or <a href="#" class="js-clone-selector" data-protocol="subversion">Subversion</a>.
  <span class="help tooltipped tooltipped-n" aria-label="Get help on which URL is right for you.">
    <a href="https://help.github.com/articles/which-remote-url-should-i-use">
    <span class="octicon octicon-question"></span>
    </a>
  </span>
</p>


  <a href="http://windows.github.com" class="minibutton sidebar-button" title="Save es-shims/es5-shim to your computer and use it in GitHub Desktop." aria-label="Save es-shims/es5-shim to your computer and use it in GitHub Desktop.">
    <span class="octicon octicon-device-desktop"></span>
    Clone in Desktop
  </a>

                <a href="/es-shims/es5-shim/archive/master.zip"
                   class="minibutton sidebar-button"
                   aria-label="Download es-shims/es5-shim as a zip file"
                   title="Download es-shims/es5-shim as a zip file"
                   rel="nofollow">
                  <span class="octicon octicon-cloud-download"></span>
                  Download ZIP
                </a>
              </div>
        </div><!-- /.repository-sidebar -->

        <div id="js-repo-pjax-container" class="repository-content context-loader-container" data-pjax-container>
          


<!-- blob contrib key: blob_contributors:v21:d88387e90b8f0a7c28dd7748a2f07c4d -->

<p title="This is a placeholder element" class="js-history-link-replace hidden"></p>

<a href="/es-shims/es5-shim/find/master" data-pjax data-hotkey="t" class="js-show-file-finder" style="display:none">Show File Finder</a>

<div class="file-navigation">
  

<div class="select-menu js-menu-container js-select-menu" >
  <span class="minibutton select-menu-button js-menu-target" data-hotkey="w"
    data-master-branch="master"
    data-ref="master"
    role="button" aria-label="Switch branches or tags" tabindex="0" aria-haspopup="true">
    <span class="octicon octicon-git-branch"></span>
    <i>branch:</i>
    <span class="js-select-button">master</span>
  </span>

  <div class="select-menu-modal-holder js-menu-content js-navigation-container" data-pjax aria-hidden="true">

    <div class="select-menu-modal">
      <div class="select-menu-header">
        <span class="select-menu-title">Switch branches/tags</span>
        <span class="octicon octicon-remove-close js-menu-close"></span>
      </div> <!-- /.select-menu-header -->

      <div class="select-menu-filters">
        <div class="select-menu-text-filter">
          <input type="text" aria-label="Filter branches/tags" id="context-commitish-filter-field" class="js-filterable-field js-navigation-enable" placeholder="Filter branches/tags">
        </div>
        <div class="select-menu-tabs">
          <ul>
            <li class="select-menu-tab">
              <a href="#" data-tab-filter="branches" class="js-select-menu-tab">Branches</a>
            </li>
            <li class="select-menu-tab">
              <a href="#" data-tab-filter="tags" class="js-select-menu-tab">Tags</a>
            </li>
          </ul>
        </div><!-- /.select-menu-tabs -->
      </div><!-- /.select-menu-filters -->

      <div class="select-menu-list select-menu-tab-bucket js-select-menu-tab-bucket" data-tab-filter="branches">

        <div data-filterable-for="context-commitish-filter-field" data-filterable-type="substring">


            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/es-shims/es5-shim/blob/js-shim/es5-shim.min.js"
                 data-name="js-shim"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text js-select-button-text css-truncate-target"
                 title="js-shim">js-shim</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item selected">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/es-shims/es5-shim/blob/master/es5-shim.min.js"
                 data-name="master"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text js-select-button-text css-truncate-target"
                 title="master">master</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/es-shims/es5-shim/blob/review/es5-shim.min.js"
                 data-name="review"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text js-select-button-text css-truncate-target"
                 title="review">review</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/es-shims/es5-shim/blob/work/es5-shim.min.js"
                 data-name="work"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text js-select-button-text css-truncate-target"
                 title="work">work</a>
            </div> <!-- /.select-menu-item -->
        </div>

          <div class="select-menu-no-results">Nothing to show</div>
      </div> <!-- /.select-menu-list -->

      <div class="select-menu-list select-menu-tab-bucket js-select-menu-tab-bucket" data-tab-filter="tags">
        <div data-filterable-for="context-commitish-filter-field" data-filterable-type="substring">


            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/es-shims/es5-shim/tree/v2.3.0/es5-shim.min.js"
                 data-name="v2.3.0"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text js-select-button-text css-truncate-target"
                 title="v2.3.0">v2.3.0</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/es-shims/es5-shim/tree/v2.2.0/es5-shim.min.js"
                 data-name="v2.2.0"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text js-select-button-text css-truncate-target"
                 title="v2.2.0">v2.2.0</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/es-shims/es5-shim/tree/v2.1.0/es5-shim.min.js"
                 data-name="v2.1.0"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text js-select-button-text css-truncate-target"
                 title="v2.1.0">v2.1.0</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/es-shims/es5-shim/tree/v2.0.12/es5-shim.min.js"
                 data-name="v2.0.12"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text js-select-button-text css-truncate-target"
                 title="v2.0.12">v2.0.12</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/es-shims/es5-shim/tree/v2.0.11/es5-shim.min.js"
                 data-name="v2.0.11"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text js-select-button-text css-truncate-target"
                 title="v2.0.11">v2.0.11</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/es-shims/es5-shim/tree/v2.0.10/es5-shim.min.js"
                 data-name="v2.0.10"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text js-select-button-text css-truncate-target"
                 title="v2.0.10">v2.0.10</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/es-shims/es5-shim/tree/v2.0.9/es5-shim.min.js"
                 data-name="v2.0.9"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text js-select-button-text css-truncate-target"
                 title="v2.0.9">v2.0.9</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/es-shims/es5-shim/tree/v2.0.8/es5-shim.min.js"
                 data-name="v2.0.8"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text js-select-button-text css-truncate-target"
                 title="v2.0.8">v2.0.8</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/es-shims/es5-shim/tree/v2.0.7/es5-shim.min.js"
                 data-name="v2.0.7"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text js-select-button-text css-truncate-target"
                 title="v2.0.7">v2.0.7</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/es-shims/es5-shim/tree/v2.0.6/es5-shim.min.js"
                 data-name="v2.0.6"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text js-select-button-text css-truncate-target"
                 title="v2.0.6">v2.0.6</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/es-shims/es5-shim/tree/v2.0.5/es5-shim.min.js"
                 data-name="v2.0.5"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text js-select-button-text css-truncate-target"
                 title="v2.0.5">v2.0.5</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/es-shims/es5-shim/tree/v2.0.4/es5-shim.min.js"
                 data-name="v2.0.4"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text js-select-button-text css-truncate-target"
                 title="v2.0.4">v2.0.4</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/es-shims/es5-shim/tree/v2.0.2/es5-shim.min.js"
                 data-name="v2.0.2"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text js-select-button-text css-truncate-target"
                 title="v2.0.2">v2.0.2</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/es-shims/es5-shim/tree/v2.0.1/es5-shim.min.js"
                 data-name="v2.0.1"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text js-select-button-text css-truncate-target"
                 title="v2.0.1">v2.0.1</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/es-shims/es5-shim/tree/v2.0.0/es5-shim.min.js"
                 data-name="v2.0.0"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text js-select-button-text css-truncate-target"
                 title="v2.0.0">v2.0.0</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/es-shims/es5-shim/tree/v1.2.10/es5-shim.min.js"
                 data-name="v1.2.10"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text js-select-button-text css-truncate-target"
                 title="v1.2.10">v1.2.10</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/es-shims/es5-shim/tree/v1.2.8/es5-shim.min.js"
                 data-name="v1.2.8"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text js-select-button-text css-truncate-target"
                 title="v1.2.8">v1.2.8</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/es-shims/es5-shim/tree/v1.2.7/es5-shim.min.js"
                 data-name="v1.2.7"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text js-select-button-text css-truncate-target"
                 title="v1.2.7">v1.2.7</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/es-shims/es5-shim/tree/v1.2.4/es5-shim.min.js"
                 data-name="v1.2.4"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text js-select-button-text css-truncate-target"
                 title="v1.2.4">v1.2.4</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/es-shims/es5-shim/tree/v1.2.3/es5-shim.min.js"
                 data-name="v1.2.3"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text js-select-button-text css-truncate-target"
                 title="v1.2.3">v1.2.3</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/es-shims/es5-shim/tree/v1.2.2/es5-shim.min.js"
                 data-name="v1.2.2"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text js-select-button-text css-truncate-target"
                 title="v1.2.2">v1.2.2</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/es-shims/es5-shim/tree/v1.2.1/es5-shim.min.js"
                 data-name="v1.2.1"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text js-select-button-text css-truncate-target"
                 title="v1.2.1">v1.2.1</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/es-shims/es5-shim/tree/v1.2.0/es5-shim.min.js"
                 data-name="v1.2.0"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text js-select-button-text css-truncate-target"
                 title="v1.2.0">v1.2.0</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/es-shims/es5-shim/tree/v1.1.0/es5-shim.min.js"
                 data-name="v1.1.0"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text js-select-button-text css-truncate-target"
                 title="v1.1.0">v1.1.0</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/es-shims/es5-shim/tree/v1.0.0/es5-shim.min.js"
                 data-name="v1.0.0"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text js-select-button-text css-truncate-target"
                 title="v1.0.0">v1.0.0</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/es-shims/es5-shim/tree/v0.2.10/es5-shim.min.js"
                 data-name="v0.2.10"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text js-select-button-text css-truncate-target"
                 title="v0.2.10">v0.2.10</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/es-shims/es5-shim/tree/v0.0.4/es5-shim.min.js"
                 data-name="v0.0.4"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text js-select-button-text css-truncate-target"
                 title="v0.0.4">v0.0.4</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/es-shims/es5-shim/tree/v0.0.3/es5-shim.min.js"
                 data-name="v0.0.3"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text js-select-button-text css-truncate-target"
                 title="v0.0.3">v0.0.3</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/es-shims/es5-shim/tree/v0.0.2/es5-shim.min.js"
                 data-name="v0.0.2"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text js-select-button-text css-truncate-target"
                 title="v0.0.2">v0.0.2</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/es-shims/es5-shim/tree/v0.0.1/es5-shim.min.js"
                 data-name="v0.0.1"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text js-select-button-text css-truncate-target"
                 title="v0.0.1">v0.0.1</a>
            </div> <!-- /.select-menu-item -->
        </div>

        <div class="select-menu-no-results">Nothing to show</div>
      </div> <!-- /.select-menu-list -->

    </div> <!-- /.select-menu-modal -->
  </div> <!-- /.select-menu-modal-holder -->
</div> <!-- /.select-menu -->

  <div class="breadcrumb">
    <span class='repo-root js-repo-root'><span itemscope="" itemtype="http://data-vocabulary.org/Breadcrumb"><a href="/es-shims/es5-shim" data-branch="master" data-direction="back" data-pjax="true" itemscope="url"><span itemprop="title">es5-shim</span></a></span></span><span class="separator"> / </span><strong class="final-path">es5-shim.min.js</strong> <span aria-label="copy to clipboard" class="js-zeroclipboard minibutton zeroclipboard-button" data-clipboard-text="es5-shim.min.js" data-copied-hint="copied!"><span class="octicon octicon-clippy"></span></span>
  </div>
</div>


  <div class="commit file-history-tease">
    <img alt="Jordan Harband" class="main-avatar js-avatar" data-user="45469" height="24" src="https://avatars3.githubusercontent.com/u/45469?s=140" width="24" />
    <span class="author"><a href="/ljharb" rel="author">ljharb</a></span>
    <time class="js-relative-date" data-title-format="YYYY-MM-DD HH:mm:ss" datetime="2014-02-07T15:22:48-08:00" title="2014-02-07 18:22:48">February 07, 2014</time>
    <div class="commit-title">
        <a href="/es-shims/es5-shim/commit/2b6b24cbb328c195935e3d0cc4920a393800a699" class="message" data-pjax="true" title="Reminifying everything. Closes #206">Reminifying everything. Closes</a> <a href="https://github.com/es-shims/es5-shim/issues/206" class="issue-link" title="In minimized, Object doesn't support property or method 'call' ">#206</a>
    </div>

    <div class="participation">
      <p class="quickstat"><a href="#blob_contributors_box" rel="facebox"><strong>5</strong>  contributors</a></p>
          <a class="avatar tooltipped tooltipped-s" aria-label="kriskowal" href="/es-shims/es5-shim/commits/master/es5-shim.min.js?author=kriskowal"><img alt="Kris Kowal" class=" js-avatar" data-user="60294" height="20" src="https://avatars0.githubusercontent.com/u/60294?s=140" width="20" /></a>
    <a class="avatar tooltipped tooltipped-s" aria-label="ljharb" href="/es-shims/es5-shim/commits/master/es5-shim.min.js?author=ljharb"><img alt="Jordan Harband" class=" js-avatar" data-user="45469" height="20" src="https://avatars3.githubusercontent.com/u/45469?s=140" width="20" /></a>
    <a class="avatar tooltipped tooltipped-s" aria-label="Gozala" href="/es-shims/es5-shim/commits/master/es5-shim.min.js?author=Gozala"><img alt="Irakli Gozalishvili" class=" js-avatar" data-user="21236" height="20" src="https://avatars1.githubusercontent.com/u/21236?s=140" width="20" /></a>
    <a class="avatar tooltipped tooltipped-s" aria-label="iwyg" href="/es-shims/es5-shim/commits/master/es5-shim.min.js?author=iwyg"><img alt="Thomas Appel" class=" js-avatar" data-user="718537" height="20" src="https://avatars3.githubusercontent.com/u/718537?s=140" width="20" /></a>
    <a class="avatar tooltipped tooltipped-s" aria-label="termi" href="/es-shims/es5-shim/commits/master/es5-shim.min.js?author=termi"><img alt="Егор Халимоненко" class=" js-avatar" data-user="973643" height="20" src="https://avatars2.githubusercontent.com/u/973643?s=140" width="20" /></a>


    </div>
    <div id="blob_contributors_box" style="display:none">
      <h2 class="facebox-header">Users who have contributed to this file</h2>
      <ul class="facebox-user-list">
          <li class="facebox-user-list-item">
            <img alt="Kris Kowal" class=" js-avatar" data-user="60294" height="24" src="https://avatars0.githubusercontent.com/u/60294?s=140" width="24" />
            <a href="/kriskowal">kriskowal</a>
          </li>
          <li class="facebox-user-list-item">
            <img alt="Jordan Harband" class=" js-avatar" data-user="45469" height="24" src="https://avatars3.githubusercontent.com/u/45469?s=140" width="24" />
            <a href="/ljharb">ljharb</a>
          </li>
          <li class="facebox-user-list-item">
            <img alt="Irakli Gozalishvili" class=" js-avatar" data-user="21236" height="24" src="https://avatars1.githubusercontent.com/u/21236?s=140" width="24" />
            <a href="/Gozala">Gozala</a>
          </li>
          <li class="facebox-user-list-item">
            <img alt="Thomas Appel" class=" js-avatar" data-user="718537" height="24" src="https://avatars3.githubusercontent.com/u/718537?s=140" width="24" />
            <a href="/iwyg">iwyg</a>
          </li>
          <li class="facebox-user-list-item">
            <img alt="Егор Халимоненко" class=" js-avatar" data-user="973643" height="24" src="https://avatars2.githubusercontent.com/u/973643?s=140" width="24" />
            <a href="/termi">termi</a>
          </li>
      </ul>
    </div>
  </div>

<div class="file-box">
  <div class="file">
    <div class="meta clearfix">
      <div class="info file-name">
        <span class="icon"><b class="octicon octicon-file-text"></b></span>
        <span class="mode" title="File Mode">file</span>
        <span class="meta-divider"></span>
          <span>7 lines (7 sloc)</span>
          <span class="meta-divider"></span>
        <span>17.949 kb</span>
      </div>
      <div class="actions">
        <div class="button-group">
            <a class="minibutton tooltipped tooltipped-w"
               href="http://windows.github.com" aria-label="Open this file in GitHub for Windows">
                <span class="octicon octicon-device-desktop"></span> Open
            </a>
              <a class="minibutton disabled tooltipped tooltipped-w" href="#"
                 aria-label="You must be signed in to make or propose changes">Edit</a>
          <a href="/es-shims/es5-shim/raw/master/es5-shim.min.js" class="button minibutton " id="raw-url">Raw</a>
            <a href="/es-shims/es5-shim/blame/master/es5-shim.min.js" class="button minibutton js-update-url-with-hash">Blame</a>
          <a href="/es-shims/es5-shim/commits/master/es5-shim.min.js" class="button minibutton " rel="nofollow">History</a>
        </div><!-- /.button-group -->
          <a class="minibutton danger disabled empty-icon tooltipped tooltipped-w" href="#"
             aria-label="You must be signed in to make or propose changes">
          Delete
        </a>
      </div><!-- /.actions -->
    </div>
        <div class="blob-wrapper data type-javascript js-blob-data">
        <table class="file-code file-diff tab-size-8">
          <tr class="file-code-line">
            <td class="blob-line-nums">
              <span id="L1" rel="#L1">1</span>
<span id="L2" rel="#L2">2</span>
<span id="L3" rel="#L3">3</span>
<span id="L4" rel="#L4">4</span>
<span id="L5" rel="#L5">5</span>
<span id="L6" rel="#L6">6</span>
<span id="L7" rel="#L7">7</span>

            </td>
            <td class="blob-line-code"><div class="code-body highlight"><pre><div class='line' id='LC1'><span class="cm">/*!</span></div><div class='line' id='LC2'><span class="cm"> * https://github.com/es-shims/es5-shim</span></div><div class='line' id='LC3'><span class="cm"> * @license es5-shim Copyright 2009-2014 by contributors, MIT License</span></div><div class='line' id='LC4'><span class="cm"> * see https://github.com/es-shims/es5-shim/blob/master/LICENSE</span></div><div class='line' id='LC5'><span class="cm"> */</span></div><div class='line' id='LC6'><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">root</span><span class="p">,</span><span class="nx">factory</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">define</span><span class="o">===</span><span class="s2">&quot;function&quot;</span><span class="o">&amp;&amp;</span><span class="nx">define</span><span class="p">.</span><span class="nx">amd</span><span class="p">){</span><span class="nx">define</span><span class="p">(</span><span class="nx">factory</span><span class="p">)}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">exports</span><span class="o">===</span><span class="s2">&quot;object&quot;</span><span class="p">){</span><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span><span class="o">=</span><span class="nx">factory</span><span class="p">()}</span><span class="k">else</span><span class="p">{</span><span class="nx">root</span><span class="p">.</span><span class="nx">returnExports</span><span class="o">=</span><span class="nx">factory</span><span class="p">()}})(</span><span class="k">this</span><span class="p">,</span><span class="kd">function</span><span class="p">(){</span><span class="kd">function</span> <span class="nx">Empty</span><span class="p">(){}</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nb">Function</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">bind</span><span class="p">){</span><span class="nb">Function</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">bind</span><span class="o">=</span><span class="kd">function</span> <span class="nx">bind</span><span class="p">(</span><span class="nx">that</span><span class="p">){</span><span class="kd">var</span> <span class="nx">target</span><span class="o">=</span><span class="k">this</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">target</span><span class="o">!=</span><span class="s2">&quot;function&quot;</span><span class="p">){</span><span class="k">throw</span> <span class="k">new</span> <span class="nx">TypeError</span><span class="p">(</span><span class="s2">&quot;Function.prototype.bind called on incompatible &quot;</span><span class="o">+</span><span class="nx">target</span><span class="p">)}</span><span class="kd">var</span> <span class="nx">args</span><span class="o">=</span><span class="nx">_Array_slice_</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">arguments</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="kd">var</span> <span class="nx">binder</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">if</span><span class="p">(</span><span class="k">this</span> <span class="k">instanceof</span> <span class="nx">bound</span><span class="p">){</span><span class="kd">var</span> <span class="nx">result</span><span class="o">=</span><span class="nx">target</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">args</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">_Array_slice_</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">arguments</span><span class="p">)));</span><span class="k">if</span><span class="p">(</span><span class="nb">Object</span><span class="p">(</span><span class="nx">result</span><span class="p">)</span><span class="o">===</span><span class="nx">result</span><span class="p">){</span><span class="k">return</span> <span class="nx">result</span><span class="p">}</span><span class="k">return</span> <span class="k">this</span><span class="p">}</span><span class="k">else</span><span class="p">{</span><span class="k">return</span> <span class="nx">target</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">that</span><span class="p">,</span><span class="nx">args</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">_Array_slice_</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">arguments</span><span class="p">)))}};</span><span class="kd">var</span> <span class="nx">boundLength</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nx">target</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="nx">args</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span><span class="kd">var</span> <span class="nx">boundArgs</span><span class="o">=</span><span class="p">[];</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;</span><span class="nx">boundLength</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">){</span><span class="nx">boundArgs</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="s2">&quot;$&quot;</span><span class="o">+</span><span class="nx">i</span><span class="p">)}</span><span class="kd">var</span> <span class="nx">bound</span><span class="o">=</span><span class="nb">Function</span><span class="p">(</span><span class="s2">&quot;binder&quot;</span><span class="p">,</span><span class="s2">&quot;return function(&quot;</span><span class="o">+</span><span class="nx">boundArgs</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;,&quot;</span><span class="p">)</span><span class="o">+</span><span class="s2">&quot;){return binder.apply(this,arguments)}&quot;</span><span class="p">)(</span><span class="nx">binder</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">target</span><span class="p">.</span><span class="nx">prototype</span><span class="p">){</span><span class="nx">Empty</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="nx">target</span><span class="p">.</span><span class="nx">prototype</span><span class="p">;</span><span class="nx">bound</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="k">new</span> <span class="nx">Empty</span><span class="p">;</span><span class="nx">Empty</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="kc">null</span><span class="p">}</span><span class="k">return</span> <span class="nx">bound</span><span class="p">}}</span><span class="kd">var</span> <span class="nx">call</span><span class="o">=</span><span class="nb">Function</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">call</span><span class="p">;</span><span class="kd">var</span> <span class="nx">prototypeOfArray</span><span class="o">=</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">;</span><span class="kd">var</span> <span class="nx">prototypeOfObject</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span><span class="p">;</span><span class="kd">var</span> <span class="nx">_Array_slice_</span><span class="o">=</span><span class="nx">prototypeOfArray</span><span class="p">.</span><span class="nx">slice</span><span class="p">;</span><span class="kd">var</span> <span class="nx">_toString</span><span class="o">=</span><span class="nx">call</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="nx">prototypeOfObject</span><span class="p">.</span><span class="nx">toString</span><span class="p">);</span><span class="kd">var</span> <span class="nx">owns</span><span class="o">=</span><span class="nx">call</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="nx">prototypeOfObject</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">);</span><span class="kd">var</span> <span class="nx">defineGetter</span><span class="p">;</span><span class="kd">var</span> <span class="nx">defineSetter</span><span class="p">;</span><span class="kd">var</span> <span class="nx">lookupGetter</span><span class="p">;</span><span class="kd">var</span> <span class="nx">lookupSetter</span><span class="p">;</span><span class="kd">var</span> <span class="nx">supportsAccessors</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">supportsAccessors</span><span class="o">=</span><span class="nx">owns</span><span class="p">(</span><span class="nx">prototypeOfObject</span><span class="p">,</span><span class="s2">&quot;__defineGetter__&quot;</span><span class="p">)){</span><span class="nx">defineGetter</span><span class="o">=</span><span class="nx">call</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="nx">prototypeOfObject</span><span class="p">.</span><span class="nx">__defineGetter__</span><span class="p">);</span><span class="nx">defineSetter</span><span class="o">=</span><span class="nx">call</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="nx">prototypeOfObject</span><span class="p">.</span><span class="nx">__defineSetter__</span><span class="p">);</span><span class="nx">lookupGetter</span><span class="o">=</span><span class="nx">call</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="nx">prototypeOfObject</span><span class="p">.</span><span class="nx">__lookupGetter__</span><span class="p">);</span><span class="nx">lookupSetter</span><span class="o">=</span><span class="nx">call</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="nx">prototypeOfObject</span><span class="p">.</span><span class="nx">__lookupSetter__</span><span class="p">)}</span><span class="k">if</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">].</span><span class="nx">splice</span><span class="p">(</span><span class="mi">0</span><span class="p">).</span><span class="nx">length</span><span class="o">!=</span><span class="mi">2</span><span class="p">){</span><span class="kd">var</span> <span class="nx">array_splice</span><span class="o">=</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">splice</span><span class="p">;</span><span class="kd">var</span> <span class="nx">array_push</span><span class="o">=</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">push</span><span class="p">;</span><span class="kd">var</span> <span class="nx">array_unshift</span><span class="o">=</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">unshift</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span><span class="kd">function</span> <span class="nx">makeArray</span><span class="p">(</span><span class="nx">l</span><span class="p">){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="p">[];</span><span class="k">while</span><span class="p">(</span><span class="nx">l</span><span class="o">--</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">unshift</span><span class="p">(</span><span class="nx">l</span><span class="p">)}</span><span class="k">return</span> <span class="nx">a</span><span class="p">}</span><span class="kd">var</span> <span class="nx">array</span><span class="o">=</span><span class="p">[],</span><span class="nx">lengthBefore</span><span class="p">;</span><span class="nx">array</span><span class="p">.</span><span class="nx">splice</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="nx">array</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">).</span><span class="nx">apply</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span><span class="nx">makeArray</span><span class="p">(</span><span class="mi">20</span><span class="p">));</span><span class="nx">array</span><span class="p">.</span><span class="nx">splice</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="nx">array</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">).</span><span class="nx">apply</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span><span class="nx">makeArray</span><span class="p">(</span><span class="mi">26</span><span class="p">));</span><span class="nx">lengthBefore</span><span class="o">=</span><span class="nx">array</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">array</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="s2">&quot;XXX&quot;</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">lengthBefore</span><span class="o">+</span><span class="mi">1</span><span class="o">==</span><span class="nx">array</span><span class="p">.</span><span class="nx">length</span><span class="p">){</span><span class="k">return</span> <span class="kc">true</span><span class="p">}}()){</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">splice</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">start</span><span class="p">,</span><span class="nx">deleteCount</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span><span class="p">){</span><span class="k">return</span><span class="p">[]}</span><span class="k">else</span><span class="p">{</span><span class="k">return</span> <span class="nx">array_splice</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,[</span><span class="nx">start</span><span class="o">===</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="mi">0</span><span class="o">:</span><span class="nx">start</span><span class="p">,</span><span class="nx">deleteCount</span><span class="o">===</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="nx">start</span><span class="o">:</span><span class="nx">deleteCount</span><span class="p">].</span><span class="nx">concat</span><span class="p">(</span><span class="nx">_Array_slice_</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">arguments</span><span class="p">,</span><span class="mi">2</span><span class="p">)))}}}</span><span class="k">else</span><span class="p">{</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">splice</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">start</span><span class="p">,</span><span class="nx">deleteCount</span><span class="p">){</span><span class="kd">var</span> <span class="nx">result</span><span class="p">,</span><span class="nx">args</span><span class="o">=</span><span class="nx">_Array_slice_</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">arguments</span><span class="p">,</span><span class="mi">2</span><span class="p">),</span><span class="nx">addElementsCount</span><span class="o">=</span><span class="nx">args</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span><span class="p">){</span><span class="k">return</span><span class="p">[]}</span><span class="k">if</span><span class="p">(</span><span class="nx">start</span><span class="o">===</span><span class="k">void</span> <span class="mi">0</span><span class="p">){</span><span class="nx">start</span><span class="o">=</span><span class="mi">0</span><span class="p">}</span><span class="k">if</span><span class="p">(</span><span class="nx">deleteCount</span><span class="o">===</span><span class="k">void</span> <span class="mi">0</span><span class="p">){</span><span class="nx">deleteCount</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="nx">start</span><span class="p">}</span><span class="k">if</span><span class="p">(</span><span class="nx">addElementsCount</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">deleteCount</span><span class="o">&lt;=</span><span class="mi">0</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">start</span><span class="o">==</span><span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="p">){</span><span class="nx">array_push</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">args</span><span class="p">);</span><span class="k">return</span><span class="p">[]}</span><span class="k">if</span><span class="p">(</span><span class="nx">start</span><span class="o">==</span><span class="mi">0</span><span class="p">){</span><span class="nx">array_unshift</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">args</span><span class="p">);</span><span class="k">return</span><span class="p">[]}}</span><span class="nx">result</span><span class="o">=</span><span class="nx">_Array_slice_</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">start</span><span class="p">,</span><span class="nx">start</span><span class="o">+</span><span class="nx">deleteCount</span><span class="p">);</span><span class="nx">args</span><span class="p">.</span><span class="nx">push</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">args</span><span class="p">,</span><span class="nx">_Array_slice_</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">start</span><span class="o">+</span><span class="nx">deleteCount</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="p">));</span><span class="nx">args</span><span class="p">.</span><span class="nx">unshift</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">args</span><span class="p">,</span><span class="nx">_Array_slice_</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">start</span><span class="p">));</span><span class="nx">args</span><span class="p">.</span><span class="nx">unshift</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span><span class="nx">array_splice</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">args</span><span class="p">);</span><span class="k">return</span> <span class="nx">result</span><span class="p">}</span><span class="k">return</span> <span class="nx">array_splice</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">start</span><span class="p">,</span><span class="nx">deleteCount</span><span class="p">)}}}</span><span class="k">if</span><span class="p">([].</span><span class="nx">unshift</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="o">!=</span><span class="mi">1</span><span class="p">){</span><span class="kd">var</span> <span class="nx">array_unshift</span><span class="o">=</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">unshift</span><span class="p">;</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">unshift</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="nx">array_unshift</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">arguments</span><span class="p">);</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="p">}}</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nb">Array</span><span class="p">.</span><span class="nx">isArray</span><span class="p">){</span><span class="nb">Array</span><span class="p">.</span><span class="nx">isArray</span><span class="o">=</span><span class="kd">function</span> <span class="nx">isArray</span><span class="p">(</span><span class="nx">obj</span><span class="p">){</span><span class="k">return</span> <span class="nx">_toString</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span><span class="o">==</span><span class="s2">&quot;[object Array]&quot;</span><span class="p">}}</span><span class="kd">var</span> <span class="nx">boxedString</span><span class="o">=</span><span class="nb">Object</span><span class="p">(</span><span class="s2">&quot;a&quot;</span><span class="p">);</span><span class="kd">var</span> <span class="nx">splitString</span><span class="o">=</span><span class="nx">boxedString</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">!=</span><span class="s2">&quot;a&quot;</span><span class="o">||!</span><span class="p">(</span><span class="mi">0</span> <span class="k">in</span> <span class="nx">boxedString</span><span class="p">);</span><span class="kd">var</span> <span class="nx">properlyBoxesContext</span><span class="o">=</span><span class="kd">function</span> <span class="nx">properlyBoxed</span><span class="p">(</span><span class="nx">method</span><span class="p">){</span><span class="kd">var</span> <span class="nx">properlyBoxes</span><span class="o">=</span><span class="kc">true</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">method</span><span class="p">){</span><span class="nx">method</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="s2">&quot;foo&quot;</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">item</span><span class="p">,</span><span class="nx">index</span><span class="p">,</span><span class="nx">context</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">context</span><span class="o">!==</span><span class="s2">&quot;object&quot;</span><span class="p">){</span><span class="nx">properlyBoxes</span><span class="o">=</span><span class="kc">false</span><span class="p">}})}</span><span class="k">return</span><span class="o">!!</span><span class="nx">method</span><span class="o">&amp;&amp;</span><span class="nx">properlyBoxes</span><span class="p">};</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">forEach</span><span class="o">||!</span><span class="nx">properlyBoxesContext</span><span class="p">(</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">forEach</span><span class="p">)){</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">forEach</span><span class="o">=</span><span class="kd">function</span> <span class="nx">forEach</span><span class="p">(</span><span class="nx">fun</span><span class="p">){</span><span class="kd">var</span> <span class="nx">object</span><span class="o">=</span><span class="nx">toObject</span><span class="p">(</span><span class="k">this</span><span class="p">),</span><span class="nx">self</span><span class="o">=</span><span class="nx">splitString</span><span class="o">&amp;&amp;</span><span class="nx">_toString</span><span class="p">(</span><span class="k">this</span><span class="p">)</span><span class="o">==</span><span class="s2">&quot;[object String]&quot;</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">)</span><span class="o">:</span><span class="nx">object</span><span class="p">,</span><span class="nx">thisp</span><span class="o">=</span><span class="nx">arguments</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">i</span><span class="o">=-</span><span class="mi">1</span><span class="p">,</span><span class="nx">length</span><span class="o">=</span><span class="nx">self</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;&gt;&gt;</span><span class="mi">0</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">_toString</span><span class="p">(</span><span class="nx">fun</span><span class="p">)</span><span class="o">!=</span><span class="s2">&quot;[object Function]&quot;</span><span class="p">){</span><span class="k">throw</span> <span class="k">new</span> <span class="nx">TypeError</span><span class="p">}</span><span class="k">while</span><span class="p">(</span><span class="o">++</span><span class="nx">i</span><span class="o">&lt;</span><span class="nx">length</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">i</span> <span class="k">in</span> <span class="nx">self</span><span class="p">){</span><span class="nx">fun</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">thisp</span><span class="p">,</span><span class="nx">self</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span><span class="nx">i</span><span class="p">,</span><span class="nx">object</span><span class="p">)}}}}</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">map</span><span class="o">||!</span><span class="nx">properlyBoxesContext</span><span class="p">(</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">map</span><span class="p">)){</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">map</span><span class="o">=</span><span class="kd">function</span> <span class="nx">map</span><span class="p">(</span><span class="nx">fun</span><span class="p">){</span><span class="kd">var</span> <span class="nx">object</span><span class="o">=</span><span class="nx">toObject</span><span class="p">(</span><span class="k">this</span><span class="p">),</span><span class="nx">self</span><span class="o">=</span><span class="nx">splitString</span><span class="o">&amp;&amp;</span><span class="nx">_toString</span><span class="p">(</span><span class="k">this</span><span class="p">)</span><span class="o">==</span><span class="s2">&quot;[object String]&quot;</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">)</span><span class="o">:</span><span class="nx">object</span><span class="p">,</span><span class="nx">length</span><span class="o">=</span><span class="nx">self</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;&gt;&gt;</span><span class="mi">0</span><span class="p">,</span><span class="nx">result</span><span class="o">=</span><span class="nb">Array</span><span class="p">(</span><span class="nx">length</span><span class="p">),</span><span class="nx">thisp</span><span class="o">=</span><span class="nx">arguments</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="nx">_toString</span><span class="p">(</span><span class="nx">fun</span><span class="p">)</span><span class="o">!=</span><span class="s2">&quot;[object Function]&quot;</span><span class="p">){</span><span class="k">throw</span> <span class="k">new</span> <span class="nx">TypeError</span><span class="p">(</span><span class="nx">fun</span><span class="o">+</span><span class="s2">&quot; is not a function&quot;</span><span class="p">)}</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;</span><span class="nx">length</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">i</span> <span class="k">in</span> <span class="nx">self</span><span class="p">)</span><span class="nx">result</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="o">=</span><span class="nx">fun</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">thisp</span><span class="p">,</span><span class="nx">self</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span><span class="nx">i</span><span class="p">,</span><span class="nx">object</span><span class="p">)}</span><span class="k">return</span> <span class="nx">result</span><span class="p">}}</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">filter</span><span class="o">||!</span><span class="nx">properlyBoxesContext</span><span class="p">(</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">filter</span><span class="p">)){</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">filter</span><span class="o">=</span><span class="kd">function</span> <span class="nx">filter</span><span class="p">(</span><span class="nx">fun</span><span class="p">){</span><span class="kd">var</span> <span class="nx">object</span><span class="o">=</span><span class="nx">toObject</span><span class="p">(</span><span class="k">this</span><span class="p">),</span><span class="nx">self</span><span class="o">=</span><span class="nx">splitString</span><span class="o">&amp;&amp;</span><span class="nx">_toString</span><span class="p">(</span><span class="k">this</span><span class="p">)</span><span class="o">==</span><span class="s2">&quot;[object String]&quot;</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">)</span><span class="o">:</span><span class="nx">object</span><span class="p">,</span><span class="nx">length</span><span class="o">=</span><span class="nx">self</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;&gt;&gt;</span><span class="mi">0</span><span class="p">,</span><span class="nx">result</span><span class="o">=</span><span class="p">[],</span><span class="nx">value</span><span class="p">,</span><span class="nx">thisp</span><span class="o">=</span><span class="nx">arguments</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="nx">_toString</span><span class="p">(</span><span class="nx">fun</span><span class="p">)</span><span class="o">!=</span><span class="s2">&quot;[object Function]&quot;</span><span class="p">){</span><span class="k">throw</span> <span class="k">new</span> <span class="nx">TypeError</span><span class="p">(</span><span class="nx">fun</span><span class="o">+</span><span class="s2">&quot; is not a function&quot;</span><span class="p">)}</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;</span><span class="nx">length</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">i</span> <span class="k">in</span> <span class="nx">self</span><span class="p">){</span><span class="nx">value</span><span class="o">=</span><span class="nx">self</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="nx">fun</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">thisp</span><span class="p">,</span><span class="nx">value</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">object</span><span class="p">)){</span><span class="nx">result</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">value</span><span class="p">)}}}</span><span class="k">return</span> <span class="nx">result</span><span class="p">}}</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">every</span><span class="o">||!</span><span class="nx">properlyBoxesContext</span><span class="p">(</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">every</span><span class="p">)){</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">every</span><span class="o">=</span><span class="kd">function</span> <span class="nx">every</span><span class="p">(</span><span class="nx">fun</span><span class="p">){</span><span class="kd">var</span> <span class="nx">object</span><span class="o">=</span><span class="nx">toObject</span><span class="p">(</span><span class="k">this</span><span class="p">),</span><span class="nx">self</span><span class="o">=</span><span class="nx">splitString</span><span class="o">&amp;&amp;</span><span class="nx">_toString</span><span class="p">(</span><span class="k">this</span><span class="p">)</span><span class="o">==</span><span class="s2">&quot;[object String]&quot;</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">)</span><span class="o">:</span><span class="nx">object</span><span class="p">,</span><span class="nx">length</span><span class="o">=</span><span class="nx">self</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;&gt;&gt;</span><span class="mi">0</span><span class="p">,</span><span class="nx">thisp</span><span class="o">=</span><span class="nx">arguments</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="nx">_toString</span><span class="p">(</span><span class="nx">fun</span><span class="p">)</span><span class="o">!=</span><span class="s2">&quot;[object Function]&quot;</span><span class="p">){</span><span class="k">throw</span> <span class="k">new</span> <span class="nx">TypeError</span><span class="p">(</span><span class="nx">fun</span><span class="o">+</span><span class="s2">&quot; is not a function&quot;</span><span class="p">)}</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;</span><span class="nx">length</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">i</span> <span class="k">in</span> <span class="nx">self</span><span class="o">&amp;&amp;!</span><span class="nx">fun</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">thisp</span><span class="p">,</span><span class="nx">self</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span><span class="nx">i</span><span class="p">,</span><span class="nx">object</span><span class="p">)){</span><span class="k">return</span> <span class="kc">false</span><span class="p">}}</span><span class="k">return</span> <span class="kc">true</span><span class="p">}}</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">some</span><span class="o">||!</span><span class="nx">properlyBoxesContext</span><span class="p">(</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">some</span><span class="p">)){</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">some</span><span class="o">=</span><span class="kd">function</span> <span class="nx">some</span><span class="p">(</span><span class="nx">fun</span><span class="p">){</span><span class="kd">var</span> <span class="nx">object</span><span class="o">=</span><span class="nx">toObject</span><span class="p">(</span><span class="k">this</span><span class="p">),</span><span class="nx">self</span><span class="o">=</span><span class="nx">splitString</span><span class="o">&amp;&amp;</span><span class="nx">_toString</span><span class="p">(</span><span class="k">this</span><span class="p">)</span><span class="o">==</span><span class="s2">&quot;[object String]&quot;</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">)</span><span class="o">:</span><span class="nx">object</span><span class="p">,</span><span class="nx">length</span><span class="o">=</span><span class="nx">self</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;&gt;&gt;</span><span class="mi">0</span><span class="p">,</span><span class="nx">thisp</span><span class="o">=</span><span class="nx">arguments</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="nx">_toString</span><span class="p">(</span><span class="nx">fun</span><span class="p">)</span><span class="o">!=</span><span class="s2">&quot;[object Function]&quot;</span><span class="p">){</span><span class="k">throw</span> <span class="k">new</span> <span class="nx">TypeError</span><span class="p">(</span><span class="nx">fun</span><span class="o">+</span><span class="s2">&quot; is not a function&quot;</span><span class="p">)}</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;</span><span class="nx">length</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">i</span> <span class="k">in</span> <span class="nx">self</span><span class="o">&amp;&amp;</span><span class="nx">fun</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">thisp</span><span class="p">,</span><span class="nx">self</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span><span class="nx">i</span><span class="p">,</span><span class="nx">object</span><span class="p">)){</span><span class="k">return</span> <span class="kc">true</span><span class="p">}}</span><span class="k">return</span> <span class="kc">false</span><span class="p">}}</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">reduce</span><span class="p">){</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">reduce</span><span class="o">=</span><span class="kd">function</span> <span class="nx">reduce</span><span class="p">(</span><span class="nx">fun</span><span class="p">){</span><span class="kd">var</span> <span class="nx">object</span><span class="o">=</span><span class="nx">toObject</span><span class="p">(</span><span class="k">this</span><span class="p">),</span><span class="nx">self</span><span class="o">=</span><span class="nx">splitString</span><span class="o">&amp;&amp;</span><span class="nx">_toString</span><span class="p">(</span><span class="k">this</span><span class="p">)</span><span class="o">==</span><span class="s2">&quot;[object String]&quot;</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">)</span><span class="o">:</span><span class="nx">object</span><span class="p">,</span><span class="nx">length</span><span class="o">=</span><span class="nx">self</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;&gt;&gt;</span><span class="mi">0</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">_toString</span><span class="p">(</span><span class="nx">fun</span><span class="p">)</span><span class="o">!=</span><span class="s2">&quot;[object Function]&quot;</span><span class="p">){</span><span class="k">throw</span> <span class="k">new</span> <span class="nx">TypeError</span><span class="p">(</span><span class="nx">fun</span><span class="o">+</span><span class="s2">&quot; is not a function&quot;</span><span class="p">)}</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">length</span><span class="o">&amp;&amp;</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span><span class="o">==</span><span class="mi">1</span><span class="p">){</span><span class="k">throw</span> <span class="k">new</span> <span class="nx">TypeError</span><span class="p">(</span><span class="s2">&quot;reduce of empty array with no initial value&quot;</span><span class="p">)}</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="kd">var</span> <span class="nx">result</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;=</span><span class="mi">2</span><span class="p">){</span><span class="nx">result</span><span class="o">=</span><span class="nx">arguments</span><span class="p">[</span><span class="mi">1</span><span class="p">]}</span><span class="k">else</span><span class="p">{</span><span class="k">do</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="nx">i</span> <span class="k">in</span> <span class="nx">self</span><span class="p">){</span><span class="nx">result</span><span class="o">=</span><span class="nx">self</span><span class="p">[</span><span class="nx">i</span><span class="o">++</span><span class="p">];</span><span class="k">break</span><span class="p">}</span><span class="k">if</span><span class="p">(</span><span class="o">++</span><span class="nx">i</span><span class="o">&gt;=</span><span class="nx">length</span><span class="p">){</span><span class="k">throw</span> <span class="k">new</span> <span class="nx">TypeError</span><span class="p">(</span><span class="s2">&quot;reduce of empty array with no initial value&quot;</span><span class="p">)}}</span><span class="k">while</span><span class="p">(</span><span class="kc">true</span><span class="p">)}</span><span class="k">for</span><span class="p">(;</span><span class="nx">i</span><span class="o">&lt;</span><span class="nx">length</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">i</span> <span class="k">in</span> <span class="nx">self</span><span class="p">){</span><span class="nx">result</span><span class="o">=</span><span class="nx">fun</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">result</span><span class="p">,</span><span class="nx">self</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span><span class="nx">i</span><span class="p">,</span><span class="nx">object</span><span class="p">)}}</span><span class="k">return</span> <span class="nx">result</span><span class="p">}}</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">reduceRight</span><span class="p">){</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">reduceRight</span><span class="o">=</span><span class="kd">function</span> <span class="nx">reduceRight</span><span class="p">(</span><span class="nx">fun</span><span class="p">){</span><span class="kd">var</span> <span class="nx">object</span><span class="o">=</span><span class="nx">toObject</span><span class="p">(</span><span class="k">this</span><span class="p">),</span><span class="nx">self</span><span class="o">=</span><span class="nx">splitString</span><span class="o">&amp;&amp;</span><span class="nx">_toString</span><span class="p">(</span><span class="k">this</span><span class="p">)</span><span class="o">==</span><span class="s2">&quot;[object String]&quot;</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">)</span><span class="o">:</span><span class="nx">object</span><span class="p">,</span><span class="nx">length</span><span class="o">=</span><span class="nx">self</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;&gt;&gt;</span><span class="mi">0</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">_toString</span><span class="p">(</span><span class="nx">fun</span><span class="p">)</span><span class="o">!=</span><span class="s2">&quot;[object Function]&quot;</span><span class="p">){</span><span class="k">throw</span> <span class="k">new</span> <span class="nx">TypeError</span><span class="p">(</span><span class="nx">fun</span><span class="o">+</span><span class="s2">&quot; is not a function&quot;</span><span class="p">)}</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">length</span><span class="o">&amp;&amp;</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span><span class="o">==</span><span class="mi">1</span><span class="p">){</span><span class="k">throw</span> <span class="k">new</span> <span class="nx">TypeError</span><span class="p">(</span><span class="s2">&quot;reduceRight of empty array with no initial value&quot;</span><span class="p">)}</span><span class="kd">var</span> <span class="nx">result</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;=</span><span class="mi">2</span><span class="p">){</span><span class="nx">result</span><span class="o">=</span><span class="nx">arguments</span><span class="p">[</span><span class="mi">1</span><span class="p">]}</span><span class="k">else</span><span class="p">{</span><span class="k">do</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="nx">i</span> <span class="k">in</span> <span class="nx">self</span><span class="p">){</span><span class="nx">result</span><span class="o">=</span><span class="nx">self</span><span class="p">[</span><span class="nx">i</span><span class="o">--</span><span class="p">];</span><span class="k">break</span><span class="p">}</span><span class="k">if</span><span class="p">(</span><span class="o">--</span><span class="nx">i</span><span class="o">&lt;</span><span class="mi">0</span><span class="p">){</span><span class="k">throw</span> <span class="k">new</span> <span class="nx">TypeError</span><span class="p">(</span><span class="s2">&quot;reduceRight of empty array with no initial value&quot;</span><span class="p">)}}</span><span class="k">while</span><span class="p">(</span><span class="kc">true</span><span class="p">)}</span><span class="k">if</span><span class="p">(</span><span class="nx">i</span><span class="o">&lt;</span><span class="mi">0</span><span class="p">){</span><span class="k">return</span> <span class="nx">result</span><span class="p">}</span><span class="k">do</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="nx">i</span> <span class="k">in</span> <span class="k">this</span><span class="p">){</span><span class="nx">result</span><span class="o">=</span><span class="nx">fun</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">result</span><span class="p">,</span><span class="nx">self</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span><span class="nx">i</span><span class="p">,</span><span class="nx">object</span><span class="p">)}}</span><span class="k">while</span><span class="p">(</span><span class="nx">i</span><span class="o">--</span><span class="p">);</span><span class="k">return</span> <span class="nx">result</span><span class="p">}}</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">indexOf</span><span class="o">||</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">].</span><span class="nx">indexOf</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">!=-</span><span class="mi">1</span><span class="p">){</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">indexOf</span><span class="o">=</span><span class="kd">function</span> <span class="nx">indexOf</span><span class="p">(</span><span class="nx">sought</span><span class="p">){</span><span class="kd">var</span> <span class="nx">self</span><span class="o">=</span><span class="nx">splitString</span><span class="o">&amp;&amp;</span><span class="nx">_toString</span><span class="p">(</span><span class="k">this</span><span class="p">)</span><span class="o">==</span><span class="s2">&quot;[object String]&quot;</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">)</span><span class="o">:</span><span class="nx">toObject</span><span class="p">(</span><span class="k">this</span><span class="p">),</span><span class="nx">length</span><span class="o">=</span><span class="nx">self</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;&gt;&gt;</span><span class="mi">0</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">length</span><span class="p">){</span><span class="k">return</span><span class="o">-</span><span class="mi">1</span><span class="p">}</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span><span class="mi">1</span><span class="p">){</span><span class="nx">i</span><span class="o">=</span><span class="nx">toInteger</span><span class="p">(</span><span class="nx">arguments</span><span class="p">[</span><span class="mi">1</span><span class="p">])}</span><span class="nx">i</span><span class="o">=</span><span class="nx">i</span><span class="o">&gt;=</span><span class="mi">0</span><span class="o">?</span><span class="nx">i</span><span class="o">:</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nx">length</span><span class="o">+</span><span class="nx">i</span><span class="p">);</span><span class="k">for</span><span class="p">(;</span><span class="nx">i</span><span class="o">&lt;</span><span class="nx">length</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">i</span> <span class="k">in</span> <span class="nx">self</span><span class="o">&amp;&amp;</span><span class="nx">self</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="o">===</span><span class="nx">sought</span><span class="p">){</span><span class="k">return</span> <span class="nx">i</span><span class="p">}}</span><span class="k">return</span><span class="o">-</span><span class="mi">1</span><span class="p">}}</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">lastIndexOf</span><span class="o">||</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">].</span><span class="nx">lastIndexOf</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">3</span><span class="p">)</span><span class="o">!=-</span><span class="mi">1</span><span class="p">){</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">lastIndexOf</span><span class="o">=</span><span class="kd">function</span> <span class="nx">lastIndexOf</span><span class="p">(</span><span class="nx">sought</span><span class="p">){</span><span class="kd">var</span> <span class="nx">self</span><span class="o">=</span><span class="nx">splitString</span><span class="o">&amp;&amp;</span><span class="nx">_toString</span><span class="p">(</span><span class="k">this</span><span class="p">)</span><span class="o">==</span><span class="s2">&quot;[object String]&quot;</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">)</span><span class="o">:</span><span class="nx">toObject</span><span class="p">(</span><span class="k">this</span><span class="p">),</span><span class="nx">length</span><span class="o">=</span><span class="nx">self</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;&gt;&gt;</span><span class="mi">0</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">length</span><span class="p">){</span><span class="k">return</span><span class="o">-</span><span class="mi">1</span><span class="p">}</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span><span class="mi">1</span><span class="p">){</span><span class="nx">i</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span><span class="nx">toInteger</span><span class="p">(</span><span class="nx">arguments</span><span class="p">[</span><span class="mi">1</span><span class="p">]))}</span><span class="nx">i</span><span class="o">=</span><span class="nx">i</span><span class="o">&gt;=</span><span class="mi">0</span><span class="o">?</span><span class="nx">i</span><span class="o">:</span><span class="nx">length</span><span class="o">-</span><span class="nb">Math</span><span class="p">.</span><span class="nx">abs</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span><span class="k">for</span><span class="p">(;</span><span class="nx">i</span><span class="o">&gt;=</span><span class="mi">0</span><span class="p">;</span><span class="nx">i</span><span class="o">--</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">i</span> <span class="k">in</span> <span class="nx">self</span><span class="o">&amp;&amp;</span><span class="nx">sought</span><span class="o">===</span><span class="nx">self</span><span class="p">[</span><span class="nx">i</span><span class="p">]){</span><span class="k">return</span> <span class="nx">i</span><span class="p">}}</span><span class="k">return</span><span class="o">-</span><span class="mi">1</span><span class="p">}}</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">){</span><span class="kd">var</span> <span class="nx">hasDontEnumBug</span><span class="o">=</span><span class="kc">true</span><span class="p">,</span><span class="nx">hasProtoEnumBug</span><span class="o">=</span><span class="kd">function</span><span class="p">(){}.</span><span class="nx">propertyIsEnumerable</span><span class="p">(</span><span class="s2">&quot;prototype&quot;</span><span class="p">),</span><span class="nx">dontEnums</span><span class="o">=</span><span class="p">[</span><span class="s2">&quot;toString&quot;</span><span class="p">,</span><span class="s2">&quot;toLocaleString&quot;</span><span class="p">,</span><span class="s2">&quot;valueOf&quot;</span><span class="p">,</span><span class="s2">&quot;hasOwnProperty&quot;</span><span class="p">,</span><span class="s2">&quot;isPrototypeOf&quot;</span><span class="p">,</span><span class="s2">&quot;propertyIsEnumerable&quot;</span><span class="p">,</span><span class="s2">&quot;constructor&quot;</span><span class="p">],</span><span class="nx">dontEnumsLength</span><span class="o">=</span><span class="nx">dontEnums</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">key</span> <span class="k">in</span><span class="p">{</span><span class="nx">toString</span><span class="o">:</span><span class="kc">null</span><span class="p">}){</span><span class="nx">hasDontEnumBug</span><span class="o">=</span><span class="kc">false</span><span class="p">}</span><span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="o">=</span><span class="kd">function</span> <span class="nx">keys</span><span class="p">(</span><span class="nx">object</span><span class="p">){</span><span class="kd">var</span> <span class="nx">isFunction</span><span class="o">=</span><span class="nx">_toString</span><span class="p">(</span><span class="nx">object</span><span class="p">)</span><span class="o">===</span><span class="s2">&quot;[object Function]&quot;</span><span class="p">,</span><span class="nx">isObject</span><span class="o">=</span><span class="nx">object</span><span class="o">!==</span><span class="kc">null</span><span class="o">&amp;&amp;</span><span class="k">typeof</span> <span class="nx">object</span><span class="o">===</span><span class="s2">&quot;object&quot;</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">isObject</span><span class="o">&amp;&amp;!</span><span class="nx">isFunction</span><span class="p">){</span><span class="k">throw</span> <span class="k">new</span> <span class="nx">TypeError</span><span class="p">(</span><span class="s2">&quot;Object.keys called on a non-object&quot;</span><span class="p">)}</span><span class="kd">var</span> <span class="nx">keys</span><span class="o">=</span><span class="p">[],</span><span class="nx">skipProto</span><span class="o">=</span><span class="nx">hasProtoEnumBug</span><span class="o">&amp;&amp;</span><span class="nx">isFunction</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">name</span> <span class="k">in</span> <span class="nx">object</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nx">skipProto</span><span class="o">&amp;&amp;</span><span class="nx">name</span><span class="o">===</span><span class="s2">&quot;prototype&quot;</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">owns</span><span class="p">(</span><span class="nx">object</span><span class="p">,</span><span class="nx">name</span><span class="p">)){</span><span class="nx">keys</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">name</span><span class="p">)}}</span><span class="k">if</span><span class="p">(</span><span class="nx">hasDontEnumBug</span><span class="p">){</span><span class="kd">var</span> <span class="nx">ctor</span><span class="o">=</span><span class="nx">object</span><span class="p">.</span><span class="nx">constructor</span><span class="p">,</span><span class="nx">skipConstructor</span><span class="o">=</span><span class="nx">ctor</span><span class="o">&amp;&amp;</span><span class="nx">ctor</span><span class="p">.</span><span class="nx">prototype</span><span class="o">===</span><span class="nx">object</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;</span><span class="nx">dontEnumsLength</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">dontEnum</span><span class="o">=</span><span class="nx">dontEnums</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nx">skipConstructor</span><span class="o">&amp;&amp;</span><span class="nx">dontEnum</span><span class="o">===</span><span class="s2">&quot;constructor&quot;</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">owns</span><span class="p">(</span><span class="nx">object</span><span class="p">,</span><span class="nx">dontEnum</span><span class="p">)){</span><span class="nx">keys</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">dontEnum</span><span class="p">)}}}</span><span class="k">return</span> <span class="nx">keys</span><span class="p">}}</span><span class="kd">var</span> <span class="nx">negativeDate</span><span class="o">=-</span><span class="mi">621987552</span><span class="nx">e5</span><span class="p">,</span><span class="nx">negativeYearString</span><span class="o">=</span><span class="s2">&quot;-000001&quot;</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nb">Date</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">toISOString</span><span class="o">||</span><span class="k">new</span> <span class="nb">Date</span><span class="p">(</span><span class="nx">negativeDate</span><span class="p">).</span><span class="nx">toISOString</span><span class="p">().</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">negativeYearString</span><span class="p">)</span><span class="o">===-</span><span class="mi">1</span><span class="p">){</span><span class="nb">Date</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">toISOString</span><span class="o">=</span><span class="kd">function</span> <span class="nx">toISOString</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">result</span><span class="p">,</span><span class="nx">length</span><span class="p">,</span><span class="nx">value</span><span class="p">,</span><span class="nx">year</span><span class="p">,</span><span class="nx">month</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nb">isFinite</span><span class="p">(</span><span class="k">this</span><span class="p">)){</span><span class="k">throw</span> <span class="k">new</span> <span class="nx">RangeError</span><span class="p">(</span><span class="s2">&quot;Date.prototype.toISOString called on non-finite value.&quot;</span><span class="p">)}</span><span class="nx">year</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">getUTCFullYear</span><span class="p">();</span><span class="nx">month</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">getUTCMonth</span><span class="p">();</span><span class="nx">year</span><span class="o">+=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">month</span><span class="o">/</span><span class="mi">12</span><span class="p">);</span><span class="nx">month</span><span class="o">=</span><span class="p">(</span><span class="nx">month</span><span class="o">%</span><span class="mi">12</span><span class="o">+</span><span class="mi">12</span><span class="p">)</span><span class="o">%</span><span class="mi">12</span><span class="p">;</span><span class="nx">result</span><span class="o">=</span><span class="p">[</span><span class="nx">month</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">getUTCDate</span><span class="p">(),</span><span class="k">this</span><span class="p">.</span><span class="nx">getUTCHours</span><span class="p">(),</span><span class="k">this</span><span class="p">.</span><span class="nx">getUTCMinutes</span><span class="p">(),</span><span class="k">this</span><span class="p">.</span><span class="nx">getUTCSeconds</span><span class="p">()];</span><span class="nx">year</span><span class="o">=</span><span class="p">(</span><span class="nx">year</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">?</span><span class="s2">&quot;-&quot;</span><span class="o">:</span><span class="nx">year</span><span class="o">&gt;</span><span class="mi">9999</span><span class="o">?</span><span class="s2">&quot;+&quot;</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="s2">&quot;00000&quot;</span><span class="o">+</span><span class="nb">Math</span><span class="p">.</span><span class="nx">abs</span><span class="p">(</span><span class="nx">year</span><span class="p">)).</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="o">&lt;=</span><span class="nx">year</span><span class="o">&amp;&amp;</span><span class="nx">year</span><span class="o">&lt;=</span><span class="mi">9999</span><span class="o">?-</span><span class="mi">4</span><span class="o">:-</span><span class="mi">6</span><span class="p">);</span><span class="nx">length</span><span class="o">=</span><span class="nx">result</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="k">while</span><span class="p">(</span><span class="nx">length</span><span class="o">--</span><span class="p">){</span><span class="nx">value</span><span class="o">=</span><span class="nx">result</span><span class="p">[</span><span class="nx">length</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="nx">value</span><span class="o">&lt;</span><span class="mi">10</span><span class="p">){</span><span class="nx">result</span><span class="p">[</span><span class="nx">length</span><span class="p">]</span><span class="o">=</span><span class="s2">&quot;0&quot;</span><span class="o">+</span><span class="nx">value</span><span class="p">}}</span><span class="k">return</span> <span class="nx">year</span><span class="o">+</span><span class="s2">&quot;-&quot;</span><span class="o">+</span><span class="nx">result</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="p">).</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;-&quot;</span><span class="p">)</span><span class="o">+</span><span class="s2">&quot;T&quot;</span><span class="o">+</span><span class="nx">result</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">2</span><span class="p">).</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;:&quot;</span><span class="p">)</span><span class="o">+</span><span class="s2">&quot;.&quot;</span><span class="o">+</span><span class="p">(</span><span class="s2">&quot;000&quot;</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">getUTCMilliseconds</span><span class="p">()).</span><span class="nx">slice</span><span class="p">(</span><span class="o">-</span><span class="mi">3</span><span class="p">)</span><span class="o">+</span><span class="s2">&quot;Z&quot;</span><span class="p">}}</span><span class="kd">var</span> <span class="nx">dateToJSONIsSupported</span><span class="o">=</span><span class="kc">false</span><span class="p">;</span><span class="k">try</span><span class="p">{</span><span class="nx">dateToJSONIsSupported</span><span class="o">=</span><span class="nb">Date</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">toJSON</span><span class="o">&amp;&amp;</span><span class="k">new</span> <span class="nb">Date</span><span class="p">(</span><span class="kc">NaN</span><span class="p">).</span><span class="nx">toJSON</span><span class="p">()</span><span class="o">===</span><span class="kc">null</span><span class="o">&amp;&amp;</span><span class="k">new</span> <span class="nb">Date</span><span class="p">(</span><span class="nx">negativeDate</span><span class="p">).</span><span class="nx">toJSON</span><span class="p">().</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">negativeYearString</span><span class="p">)</span><span class="o">!==-</span><span class="mi">1</span><span class="o">&amp;&amp;</span><span class="nb">Date</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">toJSON</span><span class="p">.</span><span class="nx">call</span><span class="p">({</span><span class="nx">toISOString</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="kc">true</span><span class="p">}})}</span><span class="k">catch</span><span class="p">(</span><span class="nx">e</span><span class="p">){}</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">dateToJSONIsSupported</span><span class="p">){</span><span class="nb">Date</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">toJSON</span><span class="o">=</span><span class="kd">function</span> <span class="nx">toJSON</span><span class="p">(</span><span class="nx">key</span><span class="p">){</span><span class="kd">var</span> <span class="nx">o</span><span class="o">=</span><span class="nb">Object</span><span class="p">(</span><span class="k">this</span><span class="p">),</span><span class="nx">tv</span><span class="o">=</span><span class="nx">toPrimitive</span><span class="p">(</span><span class="nx">o</span><span class="p">),</span><span class="nx">toISO</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">tv</span><span class="o">===</span><span class="s2">&quot;number&quot;</span><span class="o">&amp;&amp;!</span><span class="nb">isFinite</span><span class="p">(</span><span class="nx">tv</span><span class="p">)){</span><span class="k">return</span> <span class="kc">null</span><span class="p">}</span><span class="nx">toISO</span><span class="o">=</span><span class="nx">o</span><span class="p">.</span><span class="nx">toISOString</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">toISO</span><span class="o">!=</span><span class="s2">&quot;function&quot;</span><span class="p">){</span><span class="k">throw</span> <span class="k">new</span> <span class="nx">TypeError</span><span class="p">(</span><span class="s2">&quot;toISOString property is not callable&quot;</span><span class="p">)}</span><span class="k">return</span> <span class="nx">toISO</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">o</span><span class="p">)}}</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nb">Date</span><span class="p">.</span><span class="nx">parse</span><span class="o">||</span><span class="s2">&quot;Date.parse is buggy&quot;</span><span class="p">){</span><span class="nb">Date</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">NativeDate</span><span class="p">){</span><span class="kd">function</span> <span class="nb">Date</span><span class="p">(</span><span class="nx">Y</span><span class="p">,</span><span class="nx">M</span><span class="p">,</span><span class="nx">D</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">m</span><span class="p">,</span><span class="nx">s</span><span class="p">,</span><span class="nx">ms</span><span class="p">){</span><span class="kd">var</span> <span class="nx">length</span><span class="o">=</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="k">this</span> <span class="k">instanceof</span> <span class="nx">NativeDate</span><span class="p">){</span><span class="kd">var</span> <span class="nx">date</span><span class="o">=</span><span class="nx">length</span><span class="o">==</span><span class="mi">1</span><span class="o">&amp;&amp;</span><span class="nb">String</span><span class="p">(</span><span class="nx">Y</span><span class="p">)</span><span class="o">===</span><span class="nx">Y</span><span class="o">?</span><span class="k">new</span> <span class="nx">NativeDate</span><span class="p">(</span><span class="nb">Date</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">Y</span><span class="p">))</span><span class="o">:</span><span class="nx">length</span><span class="o">&gt;=</span><span class="mi">7</span><span class="o">?</span><span class="k">new</span> <span class="nx">NativeDate</span><span class="p">(</span><span class="nx">Y</span><span class="p">,</span><span class="nx">M</span><span class="p">,</span><span class="nx">D</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">m</span><span class="p">,</span><span class="nx">s</span><span class="p">,</span><span class="nx">ms</span><span class="p">)</span><span class="o">:</span><span class="nx">length</span><span class="o">&gt;=</span><span class="mi">6</span><span class="o">?</span><span class="k">new</span> <span class="nx">NativeDate</span><span class="p">(</span><span class="nx">Y</span><span class="p">,</span><span class="nx">M</span><span class="p">,</span><span class="nx">D</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">m</span><span class="p">,</span><span class="nx">s</span><span class="p">)</span><span class="o">:</span><span class="nx">length</span><span class="o">&gt;=</span><span class="mi">5</span><span class="o">?</span><span class="k">new</span> <span class="nx">NativeDate</span><span class="p">(</span><span class="nx">Y</span><span class="p">,</span><span class="nx">M</span><span class="p">,</span><span class="nx">D</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">m</span><span class="p">)</span><span class="o">:</span><span class="nx">length</span><span class="o">&gt;=</span><span class="mi">4</span><span class="o">?</span><span class="k">new</span> <span class="nx">NativeDate</span><span class="p">(</span><span class="nx">Y</span><span class="p">,</span><span class="nx">M</span><span class="p">,</span><span class="nx">D</span><span class="p">,</span><span class="nx">h</span><span class="p">)</span><span class="o">:</span><span class="nx">length</span><span class="o">&gt;=</span><span class="mi">3</span><span class="o">?</span><span class="k">new</span> <span class="nx">NativeDate</span><span class="p">(</span><span class="nx">Y</span><span class="p">,</span><span class="nx">M</span><span class="p">,</span><span class="nx">D</span><span class="p">)</span><span class="o">:</span><span class="nx">length</span><span class="o">&gt;=</span><span class="mi">2</span><span class="o">?</span><span class="k">new</span> <span class="nx">NativeDate</span><span class="p">(</span><span class="nx">Y</span><span class="p">,</span><span class="nx">M</span><span class="p">)</span><span class="o">:</span><span class="nx">length</span><span class="o">&gt;=</span><span class="mi">1</span><span class="o">?</span><span class="k">new</span> <span class="nx">NativeDate</span><span class="p">(</span><span class="nx">Y</span><span class="p">)</span><span class="o">:</span><span class="k">new</span> <span class="nx">NativeDate</span><span class="p">;</span><span class="nx">date</span><span class="p">.</span><span class="nx">constructor</span><span class="o">=</span><span class="nb">Date</span><span class="p">;</span><span class="k">return</span> <span class="nx">date</span><span class="p">}</span><span class="k">return</span> <span class="nx">NativeDate</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">arguments</span><span class="p">)}</span><span class="kd">var</span> <span class="nx">isoDateExpression</span><span class="o">=</span><span class="k">new</span> <span class="nb">RegExp</span><span class="p">(</span><span class="s2">&quot;^&quot;</span><span class="o">+</span><span class="s2">&quot;(\\d{4}|[+-]\\d{6})&quot;</span><span class="o">+</span><span class="s2">&quot;(?:-(\\d{2})&quot;</span><span class="o">+</span><span class="s2">&quot;(?:-(\\d{2})&quot;</span><span class="o">+</span><span class="s2">&quot;(?:&quot;</span><span class="o">+</span><span class="s2">&quot;T(\\d{2})&quot;</span><span class="o">+</span><span class="s2">&quot;:(\\d{2})&quot;</span><span class="o">+</span><span class="s2">&quot;(?:&quot;</span><span class="o">+</span><span class="s2">&quot;:(\\d{2})&quot;</span><span class="o">+</span><span class="s2">&quot;(?:(\\.\\d{1,}))?&quot;</span><span class="o">+</span><span class="s2">&quot;)?&quot;</span><span class="o">+</span><span class="s2">&quot;(&quot;</span><span class="o">+</span><span class="s2">&quot;Z|&quot;</span><span class="o">+</span><span class="s2">&quot;(?:&quot;</span><span class="o">+</span><span class="s2">&quot;([-+])&quot;</span><span class="o">+</span><span class="s2">&quot;(\\d{2})&quot;</span><span class="o">+</span><span class="s2">&quot;:(\\d{2})&quot;</span><span class="o">+</span><span class="s2">&quot;)&quot;</span><span class="o">+</span><span class="s2">&quot;)?)?)?)?&quot;</span><span class="o">+</span><span class="s2">&quot;$&quot;</span><span class="p">);</span><span class="kd">var</span> <span class="nx">months</span><span class="o">=</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">31</span><span class="p">,</span><span class="mi">59</span><span class="p">,</span><span class="mi">90</span><span class="p">,</span><span class="mi">120</span><span class="p">,</span><span class="mi">151</span><span class="p">,</span><span class="mi">181</span><span class="p">,</span><span class="mi">212</span><span class="p">,</span><span class="mi">243</span><span class="p">,</span><span class="mi">273</span><span class="p">,</span><span class="mi">304</span><span class="p">,</span><span class="mi">334</span><span class="p">,</span><span class="mi">365</span><span class="p">];</span><span class="kd">function</span> <span class="nx">dayFromMonth</span><span class="p">(</span><span class="nx">year</span><span class="p">,</span><span class="nx">month</span><span class="p">){</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="nx">month</span><span class="o">&gt;</span><span class="mi">1</span><span class="o">?</span><span class="mi">1</span><span class="o">:</span><span class="mi">0</span><span class="p">;</span><span class="k">return</span> <span class="nx">months</span><span class="p">[</span><span class="nx">month</span><span class="p">]</span><span class="o">+</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">((</span><span class="nx">year</span><span class="o">-</span><span class="mi">1969</span><span class="o">+</span><span class="nx">t</span><span class="p">)</span><span class="o">/</span><span class="mi">4</span><span class="p">)</span><span class="o">-</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">((</span><span class="nx">year</span><span class="o">-</span><span class="mi">1901</span><span class="o">+</span><span class="nx">t</span><span class="p">)</span><span class="o">/</span><span class="mi">100</span><span class="p">)</span><span class="o">+</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">((</span><span class="nx">year</span><span class="o">-</span><span class="mi">1601</span><span class="o">+</span><span class="nx">t</span><span class="p">)</span><span class="o">/</span><span class="mi">400</span><span class="p">)</span><span class="o">+</span><span class="mi">365</span><span class="o">*</span><span class="p">(</span><span class="nx">year</span><span class="o">-</span><span class="mi">1970</span><span class="p">)}</span><span class="kd">function</span> <span class="nx">toUTC</span><span class="p">(</span><span class="nx">t</span><span class="p">){</span><span class="k">return</span> <span class="nb">Number</span><span class="p">(</span><span class="k">new</span> <span class="nx">NativeDate</span><span class="p">(</span><span class="mi">1970</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">t</span><span class="p">))}</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">key</span> <span class="k">in</span> <span class="nx">NativeDate</span><span class="p">){</span><span class="nb">Date</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span><span class="o">=</span><span class="nx">NativeDate</span><span class="p">[</span><span class="nx">key</span><span class="p">]}</span><span class="nb">Date</span><span class="p">.</span><span class="nx">now</span><span class="o">=</span><span class="nx">NativeDate</span><span class="p">.</span><span class="nx">now</span><span class="p">;</span><span class="nb">Date</span><span class="p">.</span><span class="nx">UTC</span><span class="o">=</span><span class="nx">NativeDate</span><span class="p">.</span><span class="nx">UTC</span><span class="p">;</span><span class="nb">Date</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="nx">NativeDate</span><span class="p">.</span><span class="nx">prototype</span><span class="p">;</span><span class="nb">Date</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">constructor</span><span class="o">=</span><span class="nb">Date</span><span class="p">;</span><span class="nb">Date</span><span class="p">.</span><span class="nx">parse</span><span class="o">=</span><span class="kd">function</span> <span class="nx">parse</span><span class="p">(</span><span class="nx">string</span><span class="p">){</span><span class="kd">var</span> <span class="nx">match</span><span class="o">=</span><span class="nx">isoDateExpression</span><span class="p">.</span><span class="nx">exec</span><span class="p">(</span><span class="nx">string</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">match</span><span class="p">){</span><span class="kd">var</span> <span class="nx">year</span><span class="o">=</span><span class="nb">Number</span><span class="p">(</span><span class="nx">match</span><span class="p">[</span><span class="mi">1</span><span class="p">]),</span><span class="nx">month</span><span class="o">=</span><span class="nb">Number</span><span class="p">(</span><span class="nx">match</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">||</span><span class="mi">1</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="nx">day</span><span class="o">=</span><span class="nb">Number</span><span class="p">(</span><span class="nx">match</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="o">||</span><span class="mi">1</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="nx">hour</span><span class="o">=</span><span class="nb">Number</span><span class="p">(</span><span class="nx">match</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">||</span><span class="mi">0</span><span class="p">),</span><span class="nx">minute</span><span class="o">=</span><span class="nb">Number</span><span class="p">(</span><span class="nx">match</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="o">||</span><span class="mi">0</span><span class="p">),</span><span class="nx">second</span><span class="o">=</span><span class="nb">Number</span><span class="p">(</span><span class="nx">match</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span><span class="o">||</span><span class="mi">0</span><span class="p">),</span><span class="nx">millisecond</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nb">Number</span><span class="p">(</span><span class="nx">match</span><span class="p">[</span><span class="mi">7</span><span class="p">]</span><span class="o">||</span><span class="mi">0</span><span class="p">)</span><span class="o">*</span><span class="mi">1</span><span class="nx">e3</span><span class="p">),</span><span class="nx">isLocalTime</span><span class="o">=</span><span class="nb">Boolean</span><span class="p">(</span><span class="nx">match</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">&amp;&amp;!</span><span class="nx">match</span><span class="p">[</span><span class="mi">8</span><span class="p">]),</span><span class="nx">signOffset</span><span class="o">=</span><span class="nx">match</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span><span class="o">===</span><span class="s2">&quot;-&quot;</span><span class="o">?</span><span class="mi">1</span><span class="o">:-</span><span class="mi">1</span><span class="p">,</span><span class="nx">hourOffset</span><span class="o">=</span><span class="nb">Number</span><span class="p">(</span><span class="nx">match</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span><span class="o">||</span><span class="mi">0</span><span class="p">),</span><span class="nx">minuteOffset</span><span class="o">=</span><span class="nb">Number</span><span class="p">(</span><span class="nx">match</span><span class="p">[</span><span class="mi">11</span><span class="p">]</span><span class="o">||</span><span class="mi">0</span><span class="p">),</span><span class="nx">result</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">hour</span><span class="o">&lt;</span><span class="p">(</span><span class="nx">minute</span><span class="o">&gt;</span><span class="mi">0</span><span class="o">||</span><span class="nx">second</span><span class="o">&gt;</span><span class="mi">0</span><span class="o">||</span><span class="nx">millisecond</span><span class="o">&gt;</span><span class="mi">0</span><span class="o">?</span><span class="mi">24</span><span class="o">:</span><span class="mi">25</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">minute</span><span class="o">&lt;</span><span class="mi">60</span><span class="o">&amp;&amp;</span><span class="nx">second</span><span class="o">&lt;</span><span class="mi">60</span><span class="o">&amp;&amp;</span><span class="nx">millisecond</span><span class="o">&lt;</span><span class="mi">1</span><span class="nx">e3</span><span class="o">&amp;&amp;</span><span class="nx">month</span><span class="o">&gt;-</span><span class="mi">1</span><span class="o">&amp;&amp;</span><span class="nx">month</span><span class="o">&lt;</span><span class="mi">12</span><span class="o">&amp;&amp;</span><span class="nx">hourOffset</span><span class="o">&lt;</span><span class="mi">24</span><span class="o">&amp;&amp;</span><span class="nx">minuteOffset</span><span class="o">&lt;</span><span class="mi">60</span><span class="o">&amp;&amp;</span><span class="nx">day</span><span class="o">&gt;-</span><span class="mi">1</span><span class="o">&amp;&amp;</span><span class="nx">day</span><span class="o">&lt;</span><span class="nx">dayFromMonth</span><span class="p">(</span><span class="nx">year</span><span class="p">,</span><span class="nx">month</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">-</span><span class="nx">dayFromMonth</span><span class="p">(</span><span class="nx">year</span><span class="p">,</span><span class="nx">month</span><span class="p">)){</span><span class="nx">result</span><span class="o">=</span><span class="p">((</span><span class="nx">dayFromMonth</span><span class="p">(</span><span class="nx">year</span><span class="p">,</span><span class="nx">month</span><span class="p">)</span><span class="o">+</span><span class="nx">day</span><span class="p">)</span><span class="o">*</span><span class="mi">24</span><span class="o">+</span><span class="nx">hour</span><span class="o">+</span><span class="nx">hourOffset</span><span class="o">*</span><span class="nx">signOffset</span><span class="p">)</span><span class="o">*</span><span class="mi">60</span><span class="p">;</span><span class="nx">result</span><span class="o">=</span><span class="p">((</span><span class="nx">result</span><span class="o">+</span><span class="nx">minute</span><span class="o">+</span><span class="nx">minuteOffset</span><span class="o">*</span><span class="nx">signOffset</span><span class="p">)</span><span class="o">*</span><span class="mi">60</span><span class="o">+</span><span class="nx">second</span><span class="p">)</span><span class="o">*</span><span class="mi">1</span><span class="nx">e3</span><span class="o">+</span><span class="nx">millisecond</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">isLocalTime</span><span class="p">){</span><span class="nx">result</span><span class="o">=</span><span class="nx">toUTC</span><span class="p">(</span><span class="nx">result</span><span class="p">)}</span><span class="k">if</span><span class="p">(</span><span class="o">-</span><span class="mi">864</span><span class="nx">e13</span><span class="o">&lt;=</span><span class="nx">result</span><span class="o">&amp;&amp;</span><span class="nx">result</span><span class="o">&lt;=</span><span class="mi">864</span><span class="nx">e13</span><span class="p">){</span><span class="k">return</span> <span class="nx">result</span><span class="p">}}</span><span class="k">return</span> <span class="kc">NaN</span><span class="p">}</span><span class="k">return</span> <span class="nx">NativeDate</span><span class="p">.</span><span class="nx">parse</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">arguments</span><span class="p">)};</span><span class="k">return</span> <span class="nb">Date</span><span class="p">}(</span><span class="nb">Date</span><span class="p">)}</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nb">Date</span><span class="p">.</span><span class="nx">now</span><span class="p">){</span><span class="nb">Date</span><span class="p">.</span><span class="nx">now</span><span class="o">=</span><span class="kd">function</span> <span class="nx">now</span><span class="p">(){</span><span class="k">return</span><span class="p">(</span><span class="k">new</span> <span class="nb">Date</span><span class="p">).</span><span class="nx">getTime</span><span class="p">()}}</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nb">Number</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">toFixed</span><span class="o">||</span><span class="mi">8</span><span class="nx">e</span><span class="o">-</span><span class="mi">5</span><span class="p">.</span><span class="nx">toFixed</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span><span class="o">!==</span><span class="s2">&quot;0.000&quot;</span><span class="o">||</span><span class="p">.</span><span class="mi">9</span><span class="p">.</span><span class="nx">toFixed</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="o">===</span><span class="s2">&quot;0&quot;</span><span class="o">||</span><span class="mf">1.255</span><span class="p">.</span><span class="nx">toFixed</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span><span class="o">!==</span><span class="s2">&quot;1.25&quot;</span><span class="o">||</span><span class="mh">0xde0b6b3a7640080</span><span class="p">.</span><span class="nx">toFixed</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="o">!==</span><span class="s2">&quot;1000000000000000128&quot;</span><span class="p">){(</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">base</span><span class="p">,</span><span class="nx">size</span><span class="p">,</span><span class="nx">data</span><span class="p">,</span><span class="nx">i</span><span class="p">;</span><span class="nx">base</span><span class="o">=</span><span class="mi">1</span><span class="nx">e7</span><span class="p">;</span><span class="nx">size</span><span class="o">=</span><span class="mi">6</span><span class="p">;</span><span class="nx">data</span><span class="o">=</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">];</span><span class="kd">function</span> <span class="nx">multiply</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=-</span><span class="mi">1</span><span class="p">;</span><span class="k">while</span><span class="p">(</span><span class="o">++</span><span class="nx">i</span><span class="o">&lt;</span><span class="nx">size</span><span class="p">){</span><span class="nx">c</span><span class="o">+=</span><span class="nx">n</span><span class="o">*</span><span class="nx">data</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span><span class="nx">data</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="o">=</span><span class="nx">c</span><span class="o">%</span><span class="nx">base</span><span class="p">;</span><span class="nx">c</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">c</span><span class="o">/</span><span class="nx">base</span><span class="p">)}}</span><span class="kd">function</span> <span class="nx">divide</span><span class="p">(</span><span class="nx">n</span><span class="p">){</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="nx">size</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">while</span><span class="p">(</span><span class="o">--</span><span class="nx">i</span><span class="o">&gt;=</span><span class="mi">0</span><span class="p">){</span><span class="nx">c</span><span class="o">+=</span><span class="nx">data</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span><span class="nx">data</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">c</span><span class="o">/</span><span class="nx">n</span><span class="p">);</span><span class="nx">c</span><span class="o">=</span><span class="nx">c</span><span class="o">%</span><span class="nx">n</span><span class="o">*</span><span class="nx">base</span><span class="p">}}</span><span class="kd">function</span> <span class="nx">toString</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="nx">size</span><span class="p">;</span><span class="kd">var</span> <span class="nx">s</span><span class="o">=</span><span class="s2">&quot;&quot;</span><span class="p">;</span><span class="k">while</span><span class="p">(</span><span class="o">--</span><span class="nx">i</span><span class="o">&gt;=</span><span class="mi">0</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">s</span><span class="o">!==</span><span class="s2">&quot;&quot;</span><span class="o">||</span><span class="nx">i</span><span class="o">===</span><span class="mi">0</span><span class="o">||</span><span class="nx">data</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="o">!==</span><span class="mi">0</span><span class="p">){</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="nb">String</span><span class="p">(</span><span class="nx">data</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span><span class="k">if</span><span class="p">(</span><span class="nx">s</span><span class="o">===</span><span class="s2">&quot;&quot;</span><span class="p">){</span><span class="nx">s</span><span class="o">=</span><span class="nx">t</span><span class="p">}</span><span class="k">else</span><span class="p">{</span><span class="nx">s</span><span class="o">+=</span><span class="s2">&quot;0000000&quot;</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">7</span><span class="o">-</span><span class="nx">t</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span><span class="o">+</span><span class="nx">t</span><span class="p">}}}</span><span class="k">return</span> <span class="nx">s</span><span class="p">}</span><span class="kd">function</span> <span class="nx">pow</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">acc</span><span class="p">){</span><span class="k">return</span> <span class="nx">n</span><span class="o">===</span><span class="mi">0</span><span class="o">?</span><span class="nx">acc</span><span class="o">:</span><span class="nx">n</span><span class="o">%</span><span class="mi">2</span><span class="o">===</span><span class="mi">1</span><span class="o">?</span><span class="nx">pow</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span><span class="nx">n</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="nx">acc</span><span class="o">*</span><span class="nx">x</span><span class="p">)</span><span class="o">:</span><span class="nx">pow</span><span class="p">(</span><span class="nx">x</span><span class="o">*</span><span class="nx">x</span><span class="p">,</span><span class="nx">n</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span><span class="nx">acc</span><span class="p">)}</span><span class="kd">function</span> <span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">){</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">while</span><span class="p">(</span><span class="nx">x</span><span class="o">&gt;=</span><span class="mi">4096</span><span class="p">){</span><span class="nx">n</span><span class="o">+=</span><span class="mi">12</span><span class="p">;</span><span class="nx">x</span><span class="o">/=</span><span class="mi">4096</span><span class="p">}</span><span class="k">while</span><span class="p">(</span><span class="nx">x</span><span class="o">&gt;=</span><span class="mi">2</span><span class="p">){</span><span class="nx">n</span><span class="o">+=</span><span class="mi">1</span><span class="p">;</span><span class="nx">x</span><span class="o">/=</span><span class="mi">2</span><span class="p">}</span><span class="k">return</span> <span class="nx">n</span><span class="p">}</span><span class="nb">Number</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">toFixed</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">fractionDigits</span><span class="p">){</span><span class="kd">var</span> <span class="nx">f</span><span class="p">,</span><span class="nx">x</span><span class="p">,</span><span class="nx">s</span><span class="p">,</span><span class="nx">m</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">z</span><span class="p">,</span><span class="nx">j</span><span class="p">,</span><span class="nx">k</span><span class="p">;</span><span class="nx">f</span><span class="o">=</span><span class="nb">Number</span><span class="p">(</span><span class="nx">fractionDigits</span><span class="p">);</span><span class="nx">f</span><span class="o">=</span><span class="nx">f</span><span class="o">!==</span><span class="nx">f</span><span class="o">?</span><span class="mi">0</span><span class="o">:</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">f</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">f</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">||</span><span class="nx">f</span><span class="o">&gt;</span><span class="mi">20</span><span class="p">){</span><span class="k">throw</span> <span class="k">new</span> <span class="nx">RangeError</span><span class="p">(</span><span class="s2">&quot;Number.toFixed called with invalid number of decimals&quot;</span><span class="p">)}</span><span class="nx">x</span><span class="o">=</span><span class="nb">Number</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">x</span><span class="o">!==</span><span class="nx">x</span><span class="p">){</span><span class="k">return</span><span class="s2">&quot;NaN&quot;</span><span class="p">}</span><span class="k">if</span><span class="p">(</span><span class="nx">x</span><span class="o">&lt;=-</span><span class="mi">1</span><span class="nx">e21</span><span class="o">||</span><span class="nx">x</span><span class="o">&gt;=</span><span class="mi">1</span><span class="nx">e21</span><span class="p">){</span><span class="k">return</span> <span class="nb">String</span><span class="p">(</span><span class="nx">x</span><span class="p">)}</span><span class="nx">s</span><span class="o">=</span><span class="s2">&quot;&quot;</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">x</span><span class="o">&lt;</span><span class="mi">0</span><span class="p">){</span><span class="nx">s</span><span class="o">=</span><span class="s2">&quot;-&quot;</span><span class="p">;</span><span class="nx">x</span><span class="o">=-</span><span class="nx">x</span><span class="p">}</span><span class="nx">m</span><span class="o">=</span><span class="s2">&quot;0&quot;</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">x</span><span class="o">&gt;</span><span class="mi">1</span><span class="nx">e</span><span class="o">-</span><span class="mi">21</span><span class="p">){</span><span class="nx">e</span><span class="o">=</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="o">*</span><span class="nx">pow</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">69</span><span class="p">,</span><span class="mi">1</span><span class="p">))</span><span class="o">-</span><span class="mi">69</span><span class="p">;</span><span class="nx">z</span><span class="o">=</span><span class="nx">e</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">?</span><span class="nx">x</span><span class="o">*</span><span class="nx">pow</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="o">-</span><span class="nx">e</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">:</span><span class="nx">x</span><span class="o">/</span><span class="nx">pow</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="nx">z</span><span class="o">*=</span><span class="mi">4503599627370496</span><span class="p">;</span><span class="nx">e</span><span class="o">=</span><span class="mi">52</span><span class="o">-</span><span class="nx">e</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">){</span><span class="nx">multiply</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nx">z</span><span class="p">);</span><span class="nx">j</span><span class="o">=</span><span class="nx">f</span><span class="p">;</span><span class="k">while</span><span class="p">(</span><span class="nx">j</span><span class="o">&gt;=</span><span class="mi">7</span><span class="p">){</span><span class="nx">multiply</span><span class="p">(</span><span class="mi">1</span><span class="nx">e7</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="nx">j</span><span class="o">-=</span><span class="mi">7</span><span class="p">}</span><span class="nx">multiply</span><span class="p">(</span><span class="nx">pow</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span><span class="nx">j</span><span class="p">,</span><span class="mi">1</span><span class="p">),</span><span class="mi">0</span><span class="p">);</span><span class="nx">j</span><span class="o">=</span><span class="nx">e</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="k">while</span><span class="p">(</span><span class="nx">j</span><span class="o">&gt;=</span><span class="mi">23</span><span class="p">){</span><span class="nx">divide</span><span class="p">(</span><span class="mi">1</span><span class="o">&lt;&lt;</span><span class="mi">23</span><span class="p">);</span><span class="nx">j</span><span class="o">-=</span><span class="mi">23</span><span class="p">}</span><span class="nx">divide</span><span class="p">(</span><span class="mi">1</span><span class="o">&lt;&lt;</span><span class="nx">j</span><span class="p">);</span><span class="nx">multiply</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="nx">divide</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span><span class="nx">m</span><span class="o">=</span><span class="nx">toString</span><span class="p">()}</span><span class="k">else</span><span class="p">{</span><span class="nx">multiply</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nx">z</span><span class="p">);</span><span class="nx">multiply</span><span class="p">(</span><span class="mi">1</span><span class="o">&lt;&lt;-</span><span class="nx">e</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="nx">m</span><span class="o">=</span><span class="nx">toString</span><span class="p">()</span><span class="o">+</span><span class="s2">&quot;0.00000000000000000000&quot;</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="o">+</span><span class="nx">f</span><span class="p">)}}</span><span class="k">if</span><span class="p">(</span><span class="nx">f</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">){</span><span class="nx">k</span><span class="o">=</span><span class="nx">m</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">k</span><span class="o">&lt;=</span><span class="nx">f</span><span class="p">){</span><span class="nx">m</span><span class="o">=</span><span class="nx">s</span><span class="o">+</span><span class="s2">&quot;0.0000000000000000000&quot;</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nx">f</span><span class="o">-</span><span class="nx">k</span><span class="o">+</span><span class="mi">2</span><span class="p">)</span><span class="o">+</span><span class="nx">m</span><span class="p">}</span><span class="k">else</span><span class="p">{</span><span class="nx">m</span><span class="o">=</span><span class="nx">s</span><span class="o">+</span><span class="nx">m</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nx">k</span><span class="o">-</span><span class="nx">f</span><span class="p">)</span><span class="o">+</span><span class="s2">&quot;.&quot;</span><span class="o">+</span><span class="nx">m</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="nx">k</span><span class="o">-</span><span class="nx">f</span><span class="p">)}}</span><span class="k">else</span><span class="p">{</span><span class="nx">m</span><span class="o">=</span><span class="nx">s</span><span class="o">+</span><span class="nx">m</span><span class="p">}</span><span class="k">return</span> <span class="nx">m</span><span class="p">}})()}</span><span class="kd">var</span> <span class="nx">string_split</span><span class="o">=</span><span class="nb">String</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">split</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="s2">&quot;ab&quot;</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="sr">/(?:ab)*/</span><span class="p">).</span><span class="nx">length</span><span class="o">!==</span><span class="mi">2</span><span class="o">||</span><span class="s2">&quot;.&quot;</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="sr">/(.?)(.?)/</span><span class="p">).</span><span class="nx">length</span><span class="o">!==</span><span class="mi">4</span><span class="o">||</span><span class="s2">&quot;tesst&quot;</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="sr">/(s)*/</span><span class="p">)[</span><span class="mi">1</span><span class="p">]</span><span class="o">===</span><span class="s2">&quot;t&quot;</span><span class="o">||</span><span class="s2">&quot;&quot;</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="sr">/.?/</span><span class="p">).</span><span class="nx">length</span><span class="o">||</span><span class="s2">&quot;.&quot;</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="sr">/()()/</span><span class="p">).</span><span class="nx">length</span><span class="o">&gt;</span><span class="mi">1</span><span class="p">){(</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">compliantExecNpcg</span><span class="o">=</span><span class="sr">/()??/</span><span class="p">.</span><span class="nx">exec</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">)[</span><span class="mi">1</span><span class="p">]</span><span class="o">===</span><span class="k">void</span> <span class="mi">0</span><span class="p">;</span><span class="nb">String</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">split</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">separator</span><span class="p">,</span><span class="nx">limit</span><span class="p">){</span><span class="kd">var</span> <span class="nx">string</span><span class="o">=</span><span class="k">this</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">separator</span><span class="o">===</span><span class="k">void</span> <span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nx">limit</span><span class="o">===</span><span class="mi">0</span><span class="p">)</span><span class="k">return</span><span class="p">[];</span><span class="k">if</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">toString</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">separator</span><span class="p">)</span><span class="o">!==</span><span class="s2">&quot;[object RegExp]&quot;</span><span class="p">){</span><span class="k">return</span> <span class="nx">string_split</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">arguments</span><span class="p">)}</span><span class="kd">var</span> <span class="nx">output</span><span class="o">=</span><span class="p">[],</span><span class="nx">flags</span><span class="o">=</span><span class="p">(</span><span class="nx">separator</span><span class="p">.</span><span class="nx">ignoreCase</span><span class="o">?</span><span class="s2">&quot;i&quot;</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="nx">separator</span><span class="p">.</span><span class="nx">multiline</span><span class="o">?</span><span class="s2">&quot;m&quot;</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="nx">separator</span><span class="p">.</span><span class="nx">extended</span><span class="o">?</span><span class="s2">&quot;x&quot;</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="nx">separator</span><span class="p">.</span><span class="nx">sticky</span><span class="o">?</span><span class="s2">&quot;y&quot;</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">),</span><span class="nx">lastLastIndex</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">separator</span><span class="o">=</span><span class="k">new</span> <span class="nb">RegExp</span><span class="p">(</span><span class="nx">separator</span><span class="p">.</span><span class="nx">source</span><span class="p">,</span><span class="nx">flags</span><span class="o">+</span><span class="s2">&quot;g&quot;</span><span class="p">),</span><span class="nx">separator2</span><span class="p">,</span><span class="nx">match</span><span class="p">,</span><span class="nx">lastIndex</span><span class="p">,</span><span class="nx">lastLength</span><span class="p">;</span><span class="nx">string</span><span class="o">+=</span><span class="s2">&quot;&quot;</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">compliantExecNpcg</span><span class="p">){</span><span class="nx">separator2</span><span class="o">=</span><span class="k">new</span> <span class="nb">RegExp</span><span class="p">(</span><span class="s2">&quot;^&quot;</span><span class="o">+</span><span class="nx">separator</span><span class="p">.</span><span class="nx">source</span><span class="o">+</span><span class="s2">&quot;$(?!\\s)&quot;</span><span class="p">,</span><span class="nx">flags</span><span class="p">)}</span><span class="nx">limit</span><span class="o">=</span><span class="nx">limit</span><span class="o">===</span><span class="k">void</span> <span class="mi">0</span><span class="o">?-</span><span class="mi">1</span><span class="o">&gt;&gt;&gt;</span><span class="mi">0</span><span class="o">:</span><span class="nx">limit</span><span class="o">&gt;&gt;&gt;</span><span class="mi">0</span><span class="p">;</span><span class="k">while</span><span class="p">(</span><span class="nx">match</span><span class="o">=</span><span class="nx">separator</span><span class="p">.</span><span class="nx">exec</span><span class="p">(</span><span class="nx">string</span><span class="p">)){</span><span class="nx">lastIndex</span><span class="o">=</span><span class="nx">match</span><span class="p">.</span><span class="nx">index</span><span class="o">+</span><span class="nx">match</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">length</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">lastIndex</span><span class="o">&gt;</span><span class="nx">lastLastIndex</span><span class="p">){</span><span class="nx">output</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">string</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="nx">lastLastIndex</span><span class="p">,</span><span class="nx">match</span><span class="p">.</span><span class="nx">index</span><span class="p">));</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">compliantExecNpcg</span><span class="o">&amp;&amp;</span><span class="nx">match</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span><span class="mi">1</span><span class="p">){</span><span class="nx">match</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">replace</span><span class="p">(</span><span class="nx">separator2</span><span class="p">,</span><span class="kd">function</span><span class="p">(){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">2</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">arguments</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="o">===</span><span class="k">void</span> <span class="mi">0</span><span class="p">){</span><span class="nx">match</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">}}})}</span><span class="k">if</span><span class="p">(</span><span class="nx">match</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span><span class="mi">1</span><span class="o">&amp;&amp;</span><span class="nx">match</span><span class="p">.</span><span class="nx">index</span><span class="o">&lt;</span><span class="nx">string</span><span class="p">.</span><span class="nx">length</span><span class="p">){</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">push</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">output</span><span class="p">,</span><span class="nx">match</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">))}</span><span class="nx">lastLength</span><span class="o">=</span><span class="nx">match</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">length</span><span class="p">;</span><span class="nx">lastLastIndex</span><span class="o">=</span><span class="nx">lastIndex</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">output</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;=</span><span class="nx">limit</span><span class="p">){</span><span class="k">break</span><span class="p">}}</span><span class="k">if</span><span class="p">(</span><span class="nx">separator</span><span class="p">.</span><span class="nx">lastIndex</span><span class="o">===</span><span class="nx">match</span><span class="p">.</span><span class="nx">index</span><span class="p">){</span><span class="nx">separator</span><span class="p">.</span><span class="nx">lastIndex</span><span class="o">++</span><span class="p">}}</span><span class="k">if</span><span class="p">(</span><span class="nx">lastLastIndex</span><span class="o">===</span><span class="nx">string</span><span class="p">.</span><span class="nx">length</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">lastLength</span><span class="o">||!</span><span class="nx">separator</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">)){</span><span class="nx">output</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">)}}</span><span class="k">else</span><span class="p">{</span><span class="nx">output</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">string</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="nx">lastLastIndex</span><span class="p">))}</span><span class="k">return</span> <span class="nx">output</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span><span class="nx">limit</span><span class="o">?</span><span class="nx">output</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nx">limit</span><span class="p">)</span><span class="o">:</span><span class="nx">output</span><span class="p">}})()}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="s2">&quot;0&quot;</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">).</span><span class="nx">length</span><span class="p">){</span><span class="nb">String</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">split</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">separator</span><span class="p">,</span><span class="nx">limit</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">separator</span><span class="o">===</span><span class="k">void</span> <span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nx">limit</span><span class="o">===</span><span class="mi">0</span><span class="p">)</span><span class="k">return</span><span class="p">[];</span><span class="k">return</span> <span class="nx">string_split</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">arguments</span><span class="p">)}}</span><span class="k">if</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">.</span><span class="nx">substr</span><span class="o">&amp;&amp;</span><span class="s2">&quot;0b&quot;</span><span class="p">.</span><span class="nx">substr</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">!==</span><span class="s2">&quot;b&quot;</span><span class="p">){</span><span class="kd">var</span> <span class="nx">string_substr</span><span class="o">=</span><span class="nb">String</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">substr</span><span class="p">;</span><span class="nb">String</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">substr</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">start</span><span class="p">,</span><span class="nx">length</span><span class="p">){</span><span class="k">return</span> <span class="nx">string_substr</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">start</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">?</span><span class="p">(</span><span class="nx">start</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="o">+</span><span class="nx">start</span><span class="p">)</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">?</span><span class="mi">0</span><span class="o">:</span><span class="nx">start</span><span class="o">:</span><span class="nx">start</span><span class="p">,</span><span class="nx">length</span><span class="p">)}}</span><span class="kd">var</span> <span class="nx">ws</span><span class="o">=</span><span class="s2">&quot;	\n\f\r \xa0\u1680\u180e\u2000\u2001\u2002\u2003&quot;</span><span class="o">+</span><span class="s2">&quot;\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028&quot;</span><span class="o">+</span><span class="s2">&quot;\u2029\ufeff&quot;</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nb">String</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">trim</span><span class="o">||</span><span class="nx">ws</span><span class="p">.</span><span class="nx">trim</span><span class="p">()){</span><span class="nx">ws</span><span class="o">=</span><span class="s2">&quot;[&quot;</span><span class="o">+</span><span class="nx">ws</span><span class="o">+</span><span class="s2">&quot;]&quot;</span><span class="p">;</span><span class="kd">var</span> <span class="nx">trimBeginRegexp</span><span class="o">=</span><span class="k">new</span> <span class="nb">RegExp</span><span class="p">(</span><span class="s2">&quot;^&quot;</span><span class="o">+</span><span class="nx">ws</span><span class="o">+</span><span class="nx">ws</span><span class="o">+</span><span class="s2">&quot;*&quot;</span><span class="p">),</span><span class="nx">trimEndRegexp</span><span class="o">=</span><span class="k">new</span> <span class="nb">RegExp</span><span class="p">(</span><span class="nx">ws</span><span class="o">+</span><span class="nx">ws</span><span class="o">+</span><span class="s2">&quot;*$&quot;</span><span class="p">);</span><span class="nb">String</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">trim</span><span class="o">=</span><span class="kd">function</span> <span class="nx">trim</span><span class="p">(){</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="o">===</span><span class="k">void</span> <span class="mi">0</span><span class="o">||</span><span class="k">this</span><span class="o">===</span><span class="kc">null</span><span class="p">){</span><span class="k">throw</span> <span class="k">new</span> <span class="nx">TypeError</span><span class="p">(</span><span class="s2">&quot;can&#39;t convert &quot;</span><span class="o">+</span><span class="k">this</span><span class="o">+</span><span class="s2">&quot; to object&quot;</span><span class="p">)}</span><span class="k">return</span> <span class="nb">String</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">replace</span><span class="p">(</span><span class="nx">trimBeginRegexp</span><span class="p">,</span><span class="s2">&quot;&quot;</span><span class="p">).</span><span class="nx">replace</span><span class="p">(</span><span class="nx">trimEndRegexp</span><span class="p">,</span><span class="s2">&quot;&quot;</span><span class="p">)}}</span><span class="k">if</span><span class="p">(</span><span class="nb">parseInt</span><span class="p">(</span><span class="nx">ws</span><span class="o">+</span><span class="s2">&quot;08&quot;</span><span class="p">)</span><span class="o">!==</span><span class="mi">8</span><span class="o">||</span><span class="nb">parseInt</span><span class="p">(</span><span class="nx">ws</span><span class="o">+</span><span class="s2">&quot;0x16&quot;</span><span class="p">)</span><span class="o">!==</span><span class="mi">22</span><span class="p">){</span><span class="nb">parseInt</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">origParseInt</span><span class="p">){</span><span class="kd">var</span> <span class="nx">hexRegex</span><span class="o">=</span><span class="sr">/^0[xX]/</span><span class="p">;</span><span class="k">return</span> <span class="kd">function</span> <span class="nx">parseIntES5</span><span class="p">(</span><span class="nx">str</span><span class="p">,</span><span class="nx">radix</span><span class="p">){</span><span class="nx">str</span><span class="o">=</span><span class="nb">String</span><span class="p">(</span><span class="nx">str</span><span class="p">).</span><span class="nx">trim</span><span class="p">();</span><span class="k">if</span><span class="p">(</span><span class="o">!+</span><span class="nx">radix</span><span class="p">){</span><span class="nx">radix</span><span class="o">=</span><span class="nx">hexRegex</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">str</span><span class="p">)</span><span class="o">?</span><span class="mi">16</span><span class="o">:</span><span class="mi">10</span><span class="p">}</span><span class="k">return</span> <span class="nx">origParseInt</span><span class="p">(</span><span class="nx">str</span><span class="p">,</span><span class="nx">radix</span><span class="p">)}}(</span><span class="nb">parseInt</span><span class="p">)}</span><span class="kd">function</span> <span class="nx">toInteger</span><span class="p">(</span><span class="nx">n</span><span class="p">){</span><span class="nx">n</span><span class="o">=+</span><span class="nx">n</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">n</span><span class="o">!==</span><span class="nx">n</span><span class="p">){</span><span class="nx">n</span><span class="o">=</span><span class="mi">0</span><span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">n</span><span class="o">!==</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nx">n</span><span class="o">!==</span><span class="mi">1</span><span class="o">/</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nx">n</span><span class="o">!==-</span><span class="p">(</span><span class="mi">1</span><span class="o">/</span><span class="mi">0</span><span class="p">)){</span><span class="nx">n</span><span class="o">=</span><span class="p">(</span><span class="nx">n</span><span class="o">&gt;</span><span class="mi">0</span><span class="o">||-</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">abs</span><span class="p">(</span><span class="nx">n</span><span class="p">))}</span><span class="k">return</span> <span class="nx">n</span><span class="p">}</span><span class="kd">function</span> <span class="nx">isPrimitive</span><span class="p">(</span><span class="nx">input</span><span class="p">){</span><span class="kd">var</span> <span class="nx">type</span><span class="o">=</span><span class="k">typeof</span> <span class="nx">input</span><span class="p">;</span><span class="k">return</span> <span class="nx">input</span><span class="o">===</span><span class="kc">null</span><span class="o">||</span><span class="nx">type</span><span class="o">===</span><span class="s2">&quot;undefined&quot;</span><span class="o">||</span><span class="nx">type</span><span class="o">===</span><span class="s2">&quot;boolean&quot;</span><span class="o">||</span><span class="nx">type</span><span class="o">===</span><span class="s2">&quot;number&quot;</span><span class="o">||</span><span class="nx">type</span><span class="o">===</span><span class="s2">&quot;string&quot;</span><span class="p">}</span><span class="kd">function</span> <span class="nx">toPrimitive</span><span class="p">(</span><span class="nx">input</span><span class="p">){</span><span class="kd">var</span> <span class="nx">val</span><span class="p">,</span><span class="nx">valueOf</span><span class="p">,</span><span class="nx">toString</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">isPrimitive</span><span class="p">(</span><span class="nx">input</span><span class="p">)){</span><span class="k">return</span> <span class="nx">input</span><span class="p">}</span><span class="nx">valueOf</span><span class="o">=</span><span class="nx">input</span><span class="p">.</span><span class="nx">valueOf</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">valueOf</span><span class="o">===</span><span class="s2">&quot;function&quot;</span><span class="p">){</span><span class="nx">val</span><span class="o">=</span><span class="nx">valueOf</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">input</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">isPrimitive</span><span class="p">(</span><span class="nx">val</span><span class="p">)){</span><span class="k">return</span> <span class="nx">val</span><span class="p">}}</span><span class="nx">toString</span><span class="o">=</span><span class="nx">input</span><span class="p">.</span><span class="nx">toString</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">toString</span><span class="o">===</span><span class="s2">&quot;function&quot;</span><span class="p">){</span><span class="nx">val</span><span class="o">=</span><span class="nx">toString</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">input</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">isPrimitive</span><span class="p">(</span><span class="nx">val</span><span class="p">)){</span><span class="k">return</span> <span class="nx">val</span><span class="p">}}</span><span class="k">throw</span> <span class="k">new</span> <span class="nx">TypeError</span><span class="p">}</span><span class="kd">var</span> <span class="nx">toObject</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">o</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">o</span><span class="o">==</span><span class="kc">null</span><span class="p">){</span><span class="k">throw</span> <span class="k">new</span> <span class="nx">TypeError</span><span class="p">(</span><span class="s2">&quot;can&#39;t convert &quot;</span><span class="o">+</span><span class="nx">o</span><span class="o">+</span><span class="s2">&quot; to object&quot;</span><span class="p">)}</span><span class="k">return</span> <span class="nb">Object</span><span class="p">(</span><span class="nx">o</span><span class="p">)}});</span></div><div class='line' id='LC7'><span class="c1">//# sourceMappingURL=es5-shim.map</span></div></pre></div></td>
          </tr>
        </table>
  </div>

  </div>
</div>

<a href="#jump-to-line" rel="facebox[.linejump]" data-hotkey="l" class="js-jump-to-line" style="display:none">Jump to Line</a>
<div id="jump-to-line" style="display:none">
  <form accept-charset="UTF-8" class="js-jump-to-line-form">
    <input class="linejump-input js-jump-to-line-field" type="text" placeholder="Jump to line&hellip;" autofocus>
    <button type="submit" class="button">Go</button>
  </form>
</div>

        </div>

      </div><!-- /.repo-container -->
      <div class="modal-backdrop"></div>
    </div><!-- /.container -->
  </div><!-- /.site -->


    </div><!-- /.wrapper -->

      <div class="container">
  <div class="site-footer">
    <ul class="site-footer-links right">
      <li><a href="https://status.github.com/">Status</a></li>
      <li><a href="http://developer.github.com">API</a></li>
      <li><a href="http://training.github.com">Training</a></li>
      <li><a href="http://shop.github.com">Shop</a></li>
      <li><a href="/blog">Blog</a></li>
      <li><a href="/about">About</a></li>

    </ul>

    <a href="/">
      <span class="mega-octicon octicon-mark-github" title="GitHub"></span>
    </a>

    <ul class="site-footer-links">
      <li>&copy; 2014 <span title="0.03013s from github-fe128-cp1-prd.iad.github.net">GitHub</span>, Inc.</li>
        <li><a href="/site/terms">Terms</a></li>
        <li><a href="/site/privacy">Privacy</a></li>
        <li><a href="/security">Security</a></li>
        <li><a href="/contact">Contact</a></li>
    </ul>
  </div><!-- /.site-footer -->
</div><!-- /.container -->


    <div class="fullscreen-overlay js-fullscreen-overlay" id="fullscreen_overlay">
  <div class="fullscreen-container js-fullscreen-container">
    <div class="textarea-wrap">
      <textarea name="fullscreen-contents" id="fullscreen-contents" class="fullscreen-contents js-fullscreen-contents" placeholder="" data-suggester="fullscreen_suggester"></textarea>
    </div>
  </div>
  <div class="fullscreen-sidebar">
    <a href="#" class="exit-fullscreen js-exit-fullscreen tooltipped tooltipped-w" aria-label="Exit Zen Mode">
      <span class="mega-octicon octicon-screen-normal"></span>
    </a>
    <a href="#" class="theme-switcher js-theme-switcher tooltipped tooltipped-w"
      aria-label="Switch themes">
      <span class="octicon octicon-color-mode"></span>
    </a>
  </div>
</div>



    <div id="ajax-error-message" class="flash flash-error">
      <span class="octicon octicon-alert"></span>
      <a href="#" class="octicon octicon-remove-close close js-ajax-error-dismiss"></a>
      Something went wrong with that request. Please try again.
    </div>

  </body>
</html>

